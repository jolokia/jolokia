<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2009-2025 Roland Huss
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <artifactId>jolokia-it-osgi</artifactId>
  <version>2.3.1-springboot4-SNAPSHOT</version>

  <name>jolokia-it-osgi</name>
  <description>Jolokia :: IT :: OSGi Tests</description>

  <parent>
    <groupId>org.jolokia</groupId>
    <artifactId>jolokia-parent</artifactId>
    <version>2.3.1-springboot4-SNAPSHOT</version>
    <relativePath>../../pom.xml</relativePath>
  </parent>

  <dependencies>

    <!-- Jolokia own artifacts -->

    <dependency>
      <groupId>org.jolokia</groupId>
      <artifactId>jolokia-json</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.jolokia</groupId>
      <artifactId>jolokia-server-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jolokia</groupId>
      <artifactId>jolokia-service-jmx</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jolokia</groupId>
      <artifactId>jolokia-service-serializer</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jolokia</groupId>
      <artifactId>jolokia-agent-osgi</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- JakartaEE dependencies -->

    <dependency>
      <groupId>jakarta.annotation</groupId>
      <artifactId>jakarta.annotation-api</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>jakarta.authentication</groupId>
      <artifactId>jakarta.authentication-api</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>jakarta.servlet</groupId>
      <artifactId>jakarta.servlet-api</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- OSGi dependencies -->

    <dependency>
      <groupId>org.osgi</groupId>
      <artifactId>osgi.core</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.osgi</groupId>
      <artifactId>org.osgi.service.servlet</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.ops4j.pax.exam</groupId>
      <artifactId>pax-exam</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.ops4j.pax.exam</groupId>
      <artifactId>pax-exam-junit4</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.ops4j.pax.exam</groupId>
      <artifactId>pax-exam-container-native</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.ops4j.pax.exam</groupId>
      <artifactId>pax-exam-link-mvn</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.servicemix.bundles</groupId>
      <artifactId>org.apache.servicemix.bundles.javax-inject</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.apache.felix.framework</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.apache.felix.configadmin</artifactId>
      <scope>test</scope>
    </dependency>

    <!-- Logging -->

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j2-impl</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>
    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>true</filtering>
      </testResource>
      <testResource>
        <directory>src/test/resources-binary</directory>
        <filtering>false</filtering>
      </testResource>
    </testResources>

    <plugins>

      <!-- Core plugins -->

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <includes>
            <include>**/*IntegrationTest.java</include>
          </includes>
          <systemPropertyVariables>
            <!-- to configure pax-exam with pax.exam.system=default which gives us more control over installed bundles -->
            <pax.exam.configuration>file:./src/test/resources/controlled-exam.properties</pax.exam.configuration>
            <!--
              system properties that specify versions of bundles installed using
              org.ops4j.pax.exam.CoreOptions.mavenBundle(), but for which we don't want to add
              maven dependencies (otherwise required if using MavenArtifactProvisionOption.versionAsInProject())
            -->
            <version.jolokia>${project.version}</version.jolokia>
            <version.pax-logging>${version.org.ops4j.pax.logging}</version.pax-logging>
            <version.pax-web>${version.org.ops4j.pax.web}</version.pax-web>
            <version.configadmin>${version.org.apache.felix.configadmin}</version.configadmin>
            <version.felix-http12>${version.org.apache.felix.http.jetty12}</version.felix-http12>
            <version.servlet-api>${version.jakarta.servlet-api}</version.servlet-api>
            <version.servlet-api6>${version.jakarta.servlet-api6}</version.servlet-api6>
          </systemPropertyVariables>
          <redirectTestOutputToFile>true</redirectTestOutputToFile>
          <runOrder>alphabetical</runOrder>
          <!--
            be careful to not load pax-logging-log4j1 and pax-logging-api through system class loader.
            failsafe has to isolate running OSGi framework from these jars - they have to be installed
            only as bundles. That's why most of the dependencies have "runtime" instead of "test" scope
          -->
          <classpathDependencyScopeExclude>runtime</classpathDependencyScopeExclude>
          <forkCount>1</forkCount>
          <reuseForks>false</reuseForks>
          <trimStackTrace>false</trimStackTrace>
          <skip>${skipOsgiTests}</skip>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.apache.maven.surefire</groupId>
            <artifactId>surefire-junit47</artifactId>
            <version>${plugin.maven-surefire-plugin}</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>integration-test</id>
            <goals>
              <goal>integration-test</goal>
            </goals>
          </execution>
          <execution>
            <id>verify</id>
            <goals>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

      <!-- ServiceMix plugins -->

      <plugin>
        <groupId>org.apache.servicemix.tooling</groupId>
        <artifactId>depends-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>generate-depends-file</id>
            <goals>
              <goal>generate-depends-file</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

</project>
