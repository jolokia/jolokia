<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2009-2013 Roland Huss
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<document>
  <properties>
    <title>Features</title>
    <author email="roland@jolokia.org">Roland Huss</author>
  </properties>

  <body>
    <!-- The body of the document contains a number of sections -->
    <div class="feature grid_18 alpha">
      <div class="grid_7 prefix_1 alpha">
        <div class="feature_box">
          <section name="Overview">
            <div class="feature_icon">
              <a style="background: none;" href="features/overview.html"><img src="images/features/overview.png" alt="Jolokia"/></a>
            </div>
            <p>
              Jolokia is an HTTP/JSON bridge for remote JMX access. It
              is an alternative to standard JSR 160 connectors, using
              an agent based approach. The client communicates with
              the agent over HTTP (GET or POST) with the request and
              response payload represented in JSON. It transparently
              bridges to the JMX world, talking to clients on the
	      frontend via a REST-like protocol and to a JMX
              MBeanServer on the backend. <a
              href="features/overview.html">More ...</a>
            </p>
          </section>
        </div>
        <div class="feature_box">
          <section name="JMX Proxy">
            <div class="feature_icon">
              <a style="background: none;" href="features/proxy.html"><img src="images/features/proxy.png" alt="Proxy"/></a>
            </div>
            <p>
              Jolokia can operate in an agentless mode
              where the only requirement on the target platform is the
              standard JSR-160 export of its MBeanServer. A proxy
              listens on the front side for Jolokia requests via
              JSON/HTTP and propagates these to the target server
              through remote JSR-160 JMX calls. Bulk requests get
              dispatched into multiple JSR-160 requests on the proxy
              transparently. <a href="features/proxy.html">More ...</a>
            </p>
          </section>
        </div>
        <div class="feature_box">
          <section name="Fast">
            <div class="feature_icon">
              <a style="background: none;" href="features/fast.html"><img src="images/features/fast.png" alt="Fast"/></a>
            </div>
            <p>
              Jolokia uses the super fast JSON serialization library
              <a style="background: none; padding: 0"
              href="http://code.google.com/p/json-simple/">json-simple</a>
              for parsing requests and creating responses. Although
              the binary protocols (JRMP or IIOP) used by the standard
              JSR-160 connectors are naturally much more compact than a
              textual representation like JSON and although they have
              some performance advantages, Jolokia balances this for
              many use cases with advanced features like bulk requests
              and low startup times. <a href="features/fast.html">More
              ...</a>
            </p>
          </section>
        </div>
        <div class="feature_box">
          <section name="Firewall friendly">
            <div class="feature_icon">
              <a style="background: none;" href="features/firewall.html"><img src="images/features/firewall.png" alt="Firewall"/></a>
            </div>
            <p>
              The usage of HTTP as transport protocol makes Jolokia a
              perfect choice for firewall setups. It can seemlessly
              operate over multiple HTTP-Proxy hops. <a href="features/firewall.html">More ...</a>
            </p>
          </section>
        </div>
      </div>
      <div class="grid_7 prefix_1 omega">
        <div class="feature_box">
          <section name="Bulk-Requests">
            <div class="feature_icon">
              <a style="background: none;" href="features/bulk-requests.html"><img src="images/features/bulk_requests.png" alt="Bulk Requests"/></a>
            </div>
            <p>
              Jolokia can process many JMX requests within a single
              network roundtrip. A HTTP POST request can encapsulate
              multiple Jolokia requests in its JSON payload which gets
              dispatched on the agent side. These bulk requests can
              increase performance drastically especially for
              monitoring use cases where many different JMX parameters
              are observed at once. The Nagios plugin
              <code>check_jmx4perl</code> uses bulk requests for its
              multi check feature. <a href="features/bulk-requests.html">More ...</a>
            </p>
          </section>
        </div>
        <div class="feature_box">
          <section name="Secure">
            <div class="feature_icon">
              <a style="background: none;" href="features/security.html"><img src="images/features/secure.png" alt="Secure"/></a>
            </div>
            <p>
              In addition to standard HTTP security Jolokia supports a
              custom policy with fine grained restrictions based on
              multiple properties like the client's IP address or
              subnet, the MBean names and their attributes and
              operations. The policy is defined in an XML format with
              support for allow/deny sections and wildcards. <a
              href="features/security.html">More ...</a>
            </p>
          </section>
        </div>
        <div class="feature_box">
          <section name="Simple">
            <div class="feature_icon">
              <a style="background: none;" href="features/simple.html"><img src="images/features/simple.png" alt="Simple"/></a>
            </div>
            <p>
              It's simple. The agent is easy to install, often easier
              than setting up a standard JSR-160 RMI
              connector. Jolokia agents can be accessed with a Web
              browser for simple request.  A custom, REST-like URL
              encoding enables easy access from any client
              platform. The client libraries' API are designed for a
              simple, typeless usage, using a request-response
              paradigma. They are not harder to use than any other
              HTTP library. <a href="features/simple.html">More
              ...</a>
            </p>
          </section>
        </div>
        <div class="feature_box">
          <section name="Polyglot">
            <div class="feature_icon">
              <a style="background: none;" href="features/polyglot.html"><img src="images/features/polyglot.png" alt="Polyglot"/></a>
            </div>
            <p>
              Thanks to the widely adopted standards HTTP and JSON,
              Jolokia is able to effortlessly bridge the Java centric
              technology JMX to non-Java platforms. <a
              href="client/java.html">Java</a>, <a
              href="client/perl.html">Perl</a> and <a
              href="client/javascript.html">Javascript</a> client
              libraries are already available, other language bindings
              are in the pipeline (e.g. Scala). <a
              href="features/polyglot.html">More ...</a>
            </p>
          </section>
        </div>
      </div>
    </div>
  </body>    
</document>

