<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2009-2013 Roland Huss
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  
  <properties>
    <title>Tutorial</title>
    <author email="roland@jolokia.org">Roland Huss</author>
  </properties>

  <body>
    <section name="5 Minute Quickstart">
      <p>
        In this tutorial, it will be demonstrated how easily a WAR agent
        can be installed on a fresh Tomcat, how to verify the
        installation and how to access the client.      
      </p>
      <subsection name="Preparation">
        <p>
          In order to start on a green field, we are installing a
          fresh Tomcat in which the agent-war is going to be
          installed. Download Tomcat 7 from its <a
          href="http://tomcat.apache.org/download-70.cgi">site</a> and
          extract it:
        </p>
        <pre><![CDATA[
$ tar zxvf apache-tomcat-7.*.tar.gz 
$ cd apache-tomcat-7.*
$ TC=`pwd`]]></pre>
        <p>
          Download the Jolokia WAR-agent and copy it into Tomcat's
          webapp directory:
        </p>
        <pre><![CDATA[
$ cd $TC/webapps
$ wget \ 
http://labs.consol.de/maven/repository/org/jolokia/jolokia-war/1.0.0/jolokia-war-1.0.0.war
$ mv jolokia-war-1.0.0.war jolokia.war]]></pre>
      </subsection>
      <subsection name="Startup and Verification">
        <p>
          Now the container can be started with:
        </p>
        <pre class="prettyprint"><![CDATA[
$ $TC/bin/catalina.sh start]]></pre>
        <p>
          In order to verify the installation, point your browser to 
        </p>
        <pre>http://localhost:8080/jolokia/version</pre>
        <p>
          which should show up something like
        </p>
        <div align="center">
          <img style="margin: 10px 0px 20px 0px;" src="images/jolokia_browser_version.png" alt="Show up version"/>
        </div>        
      </subsection>
      <subsection name="A simple Java Client">
        <p>
          Let's try out the client side of Jolokia. This example will
          print out the memory usage of your tomcat:
        </p>
        <pre class="prettyprint"><![CDATA[
import org.jolokia.client.*;
import org.jolokia.client.request.*;
import java.util.Map;

public class JolokiaDemo {
    
    public static void main(String[] args) throws Exception {
        J4pClient j4pClient = new J4pClient("http://localhost:8080/jolokia");
        J4pReadRequest req = new J4pReadRequest("java.lang:type=Memory",
                                                "HeapMemoryUsage");
        J4pReadResponse resp = j4pClient.execute(req);
        Map<String,String> vals = resp.getValue();
        int used = Integer.parseInt(vals.get("used"));
        int max = Integer.parseInt(vals.get("max"));
        int usage = (int) (used * 100 / max);
        System.out.println("Memory usage: used: " + used + 
                           " / max: " + max + " = " + usage + "%");
    }
}]]></pre>
        <p>
          Save this code-snippet under
          <code>JolokiaDemo.java</code>. Then download 
        </p>
        <ul>
          <li>
            <a
                href="http://labs.consol.de/maven/repository/org/jolokia/jolokia-client-java/1.0.0/jolokia-client-java-1.0.0.jar">jolokia-client-java-1.0.0.jar</a>
          </li>
          <li>
            <a
                href="http://mirrors.ibiblio.org/pub/mirrors/maven2/com/googlecode/json-simple/json-simple/1.1/json-simple-1.1.jar">
            json-simple</a>
          </li>
          <li>
            <a href="http://mirrors.ibiblio.org/pub/mirrors/maven2/org/apache/httpcomponents/httpclient/4.1.2/httpclient-4.1.2.jar">httpclient-4.1.2.jar</a>
          </li>
          <li>
            <a href="http://mirrors.ibiblio.org/pub/mirrors/maven2/org/apache/httpcomponents/httpcore/4.1.2/httpcore-4.1.2.jar">httpcore-4.1.2.jar</a>
          </li>
          <li>
            <a href="http://mirrors.ibiblio.org/pub/mirrors/maven2/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar">commons-logging-1.1.1.jar</a>
          </li>
        </ul>
        <p>
          and put it into the same directory as this demo
          class. Finally, compile the demo and let it run:
        </p>
        <pre class="prettyprin lang-bash"><![CDATA[
$ export CLASSPATH=json_simple-1.1.jar:jolokia-client-java-1.0.0.jar:\
httpcore-4.1.2.jar:httpclient-4.1.2.jar:commons-logging-1.1.1.jar:.
]]>
$ javac JolokiaDemo.java
$ java JolokiaDemo
Memory usage: used: 9526648 / max: 129957888 = 7%
</pre>
        <p>
          If you are using Maven, please don't worry about the
          dependencies which just have been downloaded manually for the
          sake of demonstration. Jolokia's Java client library comes
          with a well defined dependency set, so Maven will do the
          magic. (In fact, the client library only depends on
          jsons-simple and http-components directly)
        </p>
      </subsection>
      <subsection name="Install Jmx4Perl">
        <p>
          The five minutes are probably over now, but I highly
          recommend to install <a
          href="http://www.jmx4perl.org">jmx4perl</a> right
          now. Beside providing a Perl language binding for Jolokia,
          there are some cool command line tools included which are
          useful on their own.
        </p>
        <ul>
          <li>
            <strong>jmx4perl</strong> is a command for exploring the
            JMX space by providing arguments on the command line.
          </li>
          <li>
            <strong>j4psh</strong> is a readline based, colored,
            interactive shell with context sensitive command
            completion on MBean names and attributes/operations. It
            is a perfect tool for interactively exploring MBeans and
            their values.
          </li>
          <li>
            <strong>check_jmx4perl</strong> is a feature reach Nagios
            plugin for connecting the Jolokia agent with Nagios.
          </li>
          <li>
            <strong>jolokia</strong> is a supporting script for easy 
            download and configuration of the Jolokia agents.
          </li>
        </ul>
        <p>
          <code>jmx4perl</code> (and its dependencies) can be easily
          installed with <code>cpan</code> if you have Perl installed:
        </p>
        <pre><![CDATA[
$ perl -MCPAN -e shell
Terminal does not support AddHistory.

cpan shell -- CPAN exploration and modules installation (v1.9205)
ReadLine support available (maybe install Bundle::CPAN or Bundle::CPANxxl?)

cpan[1]> install JMX::Jmx4Perl
...
...
jmx4perl
========

jmx4perl is a command line utility for accessing Jolokia agents
(www.jolokia.org). It can be used for script based exploration 
and easy inspection of the JMX space.

Install 'jmx4perl' ? (y/n) [y ]
....
]]></pre>
        <p>
          You will be asked for each featured script whether it should
          be installed in addition to the core Perl modules. Each of
          these scripts (jmx4perl, j4psh, jolokia, check_jmx4perl) will
          introduce a set of new depedencies of Perl modules which in
          turn might depend on other Perl modules or system
          libraries. Perl modules are resolved and installed
          automatically. The agent management script
          <code>jolokia</code> depends on <code>XML::LibXML</code>
          which requires a development version of <code>libxml</code>
          installed locally. It is recommended to install
          <code>libxml2-dev</code> with the package management tool of
          your OS (e.g. <code>apt-get install libxml2-dev</code>
          ). Alternatively, the OS package for XML::LibXML could be
          used. (e.g. <code>libxml-libxml-perl</code> for
          Ubuntu)
        </p>
        <p>
          When jmx4perl is installed, try out jmx4perl:
        </p>
        <pre><![CDATA[
$ jmx4perl http://localhost:8080/jolokia list
....
$ jmx4perl http://localhost:8080/jolokia \
           read java.lang:type=Memory HeapMemoryUsage
$ jmx4perl --help
$ man jmx4perl]]></pre>
        <p>
          Next, I recommend to try out <code>j4psh</code>.  For
          getting the best readline experience, it is recommended to
          also install <code>Term::ReadLine::Gnu</code> (which in turn
          requires the package <code>libreadline-dev</code> to be
          installed), but this is optional. Now, fire up j4psh and let
          the fun begin:
        </p>
        <div align="center">
          <img src="images/j4psh_screenshot.png" alt="j4psh screenshot"/>
        </div>
        <p>
          Don't forget to try out TAB triggered command and argument
          completion as demonstrated in this <a
          href="http://vimeo.com/20215477">screencast</a>.
        </p>
      </subsection>
      <subsection name="Summary">
        <p>
          That's all for now, I hope you enjoyed this first ride. For
          the next steps I recommend to have a look into <a
          href="reference/html/index.html">reference manual</a>.
        </p>
      </subsection>
    </section>
  </body>
</document>
