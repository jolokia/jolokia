<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2009-2013 Roland Huss
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  
  <properties>
    <title>The Jolokia Story</title>
    <author email="roland@jolokia.org">Roland Huss</author>
  </properties>
  
  <body>
    <section name="The Story">
      <p style="text-align: left;">
        <img src="images/jolokia_home.png" style="float: right; margin: 0 0 10px 20px;" alt="Jolokia, homegrown"/>
        All started up early 2009 when my colleague Gerhard Lausser,
        our local Nagios guru, came up in my office and complained
        heavily about how damned hard it is to monitor JEE servers
        with <a href="http://www.nagios.org">Nagios</a>. As you might
        know, Nagios uses a plethora of plugins for doing the hard
        monitoring stuff. These are running locally on a central
        Nagios host contacting the watched systems mostly remotely
        with various techniques. For Java applications, <a
        href="http://java.sun.com/javase/technologies/core/mntr-mgmt/javamanagement/">JMX</a>
        is of course the proper choice which provides <a
        href="http://jcp.org/en/jsr/detail?id=160">JSR-160</a>
        connectors remote access to the local MBeans. At this time,
        indeed several JMX Nagios plugins were already
        present. However, they all suffer from the same problem:
        JSR-160 connectors are highly Java centric where its default
        protocol RMI is not available outside the Java universe. So,
        each plugin (which runs in an external process when called by
        Nagios) needs to start up a Java Virtual Machine. This has to
        be done for every check, and since there are usual hundreds of
        checks every five minutes this becomes easily a performance
        and memory bottleneck. Additionally, you need a Java
        installation on the Nagios host, which for many administrators
        poses a, let's say 'cultural' problem.
      </p>
      <p>
        As a Java programmer I love JMX. It is one of the oldest Java
        specifications, which was carefully crafted from the very
        beginning (especially the core API). Other Java APIs had to
        take a longer tour until they became widely accepted by the
        masses as not being painful (think "EJB" or "JSF"). However,
        I'm not really happy with JSR-160's focus on Java based remote
        protocols. There has been some efforts to make these more
        friendly to the outside world (e.g. a <a
        href="https://ws-jmx-connector.dev.java.net/">JSR-160
        WebService connector</a> as defined in JSR-262), but it seems
        there is not much momentum anymore behind these. In fact, the
        last update on <a
        href="http://jcp.org/en/jsr/detail?id=262">JSR-262</a> was in
        May 2008 and it is marked as "inactive". And frankly, I don't
        want to use WebServices for monitoring, either (although <a
        href="http://dmtf.org/standards/wsman">WS-Mangament</a> is an
        interesting approach).
      </p>
      <p>
        That was the birth of <a href="http://www.jmx4perl.org">jmx4perl</a> in May
        2009. Coming from a strong Perl background (being a SGI system
        administrator at university in my former life), my initial goal
        was to use pure Perl for accessing remote JMX information without
        the need of a local Java integration.  In turned out that an agent
        based approach was the simplest way. The first agent, a JEE
        webapplication, which on the frontside translates HTTP requests with
        a JSON payload to local JMX calls (and vice versa for the response),
        was really lightweight. It knew how to read and set attributes and
        how to execute operations. It had a list mode for looking up all
        registered MBeans. And it was
        <a href="http://labs.consol.de/maven/repository/org/jmx4perl/j4p-agent/0.16/j4p-agent-0.16.war">38kb</a> in size.
      </p>
      <p>
        The jmx4perl agent is now ~ 200kb 'large' with many more
        features (search, bulk requests, security, ....) but I still call it
        lighweight ;-). The perl part consists now of a powerful
        Nagios plugin called <a
        href="http://search.cpan.org/~roland/jmx4perl/scripts/check_jmx4perl">check_jmx4perl</a>,
        a command line tool called <a
        href="http://search.cpan.org/~roland/jmx4perl/scripts/jmx4perl">jmx4perl</a>,
        a Perl library named <a
        href="http://search.cpan.org/~roland/jmx4perl/lib/JMX/Jmx4Perl.pm">JMX::Jmx4Perl</a>
        and a readline based (with context sensitive tab completion on
        MBean names) JMX shell called <a
        href="http://search.cpan.org/~roland/jmx4perl/scripts/j4psh">j4psh</a>.
      </p>
      <p>
        From the feedback I got, it seems that the Nagios world is happy
        now. But since I think that this agent based approach provides also a
        good alternative to JSR-160 connectors for other platforms, it is
        time to move on and split the Java and Perl part of jmx4perl into two
        separate projects. The number of programmers who love both Java
        and Perl is negligible anyway ;-). The Perl part (which is
        approximately the same size as the Java part) remains jmx4perl,
        the agent part has become ... Jolokia.
      </p>
    </section>
    <section name='Why it is named "Jolokia" ?'>
      <p>
        Jolokia is one of the world hottest chili pepper with a
        Scoville rating of at most <a
        href="http://en.wikipedia.org/wiki/Scoville_scale#List_of_Scoville_ratings">1,075,000</a>. I'm
        a chili head and grow chilis since 2006. I love chilis as much
        as JMX. That's the main reason.
      </p>
      <p>        
        The other reason is, that a chili is a good metaphore for a
        hot, new approach for JMX remoting. Especially when it is the
        hottest one ;-)
      </p>
    </section>
    <section name="Who am I">
      <p>
        My name is <a href="http://github.com/rhuss">Roland Huss</a>
        and during the last decades, I mainly acted as Java wizard,
        transforming large XML documents into huge stacktraces. As
        head of "Research &amp; Development" at the Munich based IT
        consulting and softwarehouse <a
        href="http://www.consol.com">ConSol*</a>, I'm particularly
        active in the area of <a
        href="http://www.consol.com/open-source-monitoring/">Open
        Source Monitoring</a> especially when it comes to JEE
        monitoring.
      </p>
    </section>
    <section name="Acknowledgments">
      <ul>
        <li>
          <a
          href="http://www.amazon.de/Nagios-Praxisbuch-Open-Source-Monitoring-Unternehmen/dp/3827328004">Gerhard
          Lausser</a> for pushing me hard to come up with jmx4perl and a
          way to allow JMX usage from a Java hostile environment.
        </li>
        <li>
          My employer <a href="http://www.consol.com">ConSol*</a> for
          allowing me to provide professional support and consulting
          for Jolokia and for sponsoring the graphics on this site.
        </li>
        <li>
          <a href="http://www.allez.de">Allez</a> (and especially
          Sorin Anca) for the artwork and this very fine logo.
        </li>
        <li>
          <a
              href="http://www.wanderinghorse.net/home/stephan/">Stephan
          Beal</a> for iron out my dump english and proofreading the
          documentation. 
        </li>
      </ul>
    </section>
    <section name="Legal stuff">
      <p>
        Now for the obligatory legal stuff. I keep it short, only
        the common boilerplate.
      </p>
      <div style="font-size: 7pt; line-height: 10pt;">
      <p>
        <strong>Liability for Content</strong>
      </p>
      <p>
        We make every effort to keep the information on our Web site
        current, but accept no liability whatsoever for the content
        provided. Pursuant to §7 par. 1 of TMG (German Tele-Media
        Act), the law limits our responsibility as a service provider
        to our own content on these Web pages.  According to §§8 to 10
        of TMG, we are not obligated to monitor third party
        information provided or stored on our Web site. However, we
        shall promptly remove any content upon becoming aware that it
        violates the law. Our liability in such an instance shall
        commence at the time we become aware of the respective
        violation.
      </p>
      <p>
        <strong>Liability for Links</strong>
      </p>
      <p>
        Our site contains links to third-party Web sites. We have no
        influence whatsoever on the information on these Web sites and
        accept no guaranty for its correctness. The content of such
        third-party sites is the responsibility of the respective
        owners/providers.  At the time third-party Web sites were linked
        to ours, we found NO GROUNDS WHATSOEVER of any likely
        contravention of the law. We shall promptly delete a link upon
        becoming aware that it violates the law.
      </p>
      <p>
        <strong>Copyrights</strong>
      </p>
      <p>
        The content and works provided on these Web pages are governed
        by the copyright laws of Germany. Duplication, processing,
        distribution, or any form of commercialization of such
        material beyond the scope of the copyright law shall require
        the prior written consent of its respective author or
        creator. 
      </p>
      <p>
        <strong>Data Protection</strong>
      </p>
      <p>
        Please be aware that there are inherent security risks in
        transmitting data, such as e-mails, via the Internet, because
        it is impossible to safeguard completely against unauthorized
        access by third parties. Nevertheless, we shall safeguard your
        data, subject to this limitation. In particular, personal
        information will be transmitted via the Internet only if it
        does not infringe upon third-party rights, unless the
        respective party has given its prior consent in view of such
        security risks. Accordingly, as the Web site provider, we
        shall not be held liable for any damages incurred as a
        consequence of such security risks or for any related acts of
        omission on our part.  We oppose the use of any available
        contact information by a third party for sending unsolicited
        advertisements. As the Web site provider, we reserve the
        express right to take legal action against unsolicited mailing
        or e-mailing of spam and other similar advertising materials.
      </p>
      </div>
    </section>
  </body>
</document>
