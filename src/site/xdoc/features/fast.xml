<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2009-2013 Roland Huss
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  
  <properties>
    <title>Fast</title>
    <author email="roland@jolokia.org">Roland Huss</author>
  </properties>

  <body>
    <section name="Fast">
      <div class="feature_icon_large">
        <img src="../images/features/fast_large.png" alt="Fast"/>
      </div>
      <p>
        <em>Before praising Jolokia to be the fasted remote JMX
        solution on the world,
        it has to be confessed, that we don't have any hard benchmarks
        yet. But this is something on the todo list.</em> 
      </p>
      <p>
        Jolokia is especially a very fast JMX remote accessing
        solution for non-Java environments since for a client there is
        no need to start a JVM which needs some time to
        startup. E.g. most of the Nagios JMX plugins out there,
        require a local JVM installation and the plugins, which are
        implemented in Java, queries the MBeans via JSR-160 and prints
        out the results to standard output for a single check, opening
        a new connection for each request. For large Nagios
        installations which monitors hundreds of servers for several
        parameters this poses a performance problem. With Jolokia, it
        has been confirmed that it scales up very well in a Nagios
        environment with 500 servers monitoring about 10 parameters on
        each server every 5 minutes.
      </p>
      <p>
        Especially <a href="bulk-requests.html">bulk requests</a> can
        speed up monitoring considerably. This unique feature, which
        is not available for JSR-160 connectors, allows for quering
        many parameters with a single server turnaround. 
      </p>
      <p>
        Jolokia uses the <a href="http://code.google.com/p/json-simple/wiki/PerformanceTesting">super fast</a> JSON serialization
        library <a href="http://code.google.com/p/json-simple/">json-simple</a>. Along with the fact that
        JSON itself is a very compact data format with small overhead
        compared to RMI, this adds to the good performance experience.
      </p>
      <p>
        In summary, all these facts indicate that the Jolokia is
        faster than standard JSR-160 connectors with communication of
        RMI. A benchmark is pending to put these statements on a solid
        ground. 
      </p>
      <subsection name="Next">
        <ul>
          <li>
            Jolokia is <a href="simple.html">simple</a>. Really.
          </li>
          <li>
            See why how Jolokia can <a href="security.html">secure</a> JMX access in a very fine granular way.
          </li>
          <li>
            Go Back to the <a href="../features-nb.html">Features Overview</a>.
          </li>
        </ul>
      </subsection>
    </section>
  </body>    
</document>

