<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2009-2013 Roland Huss
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  
  <properties>
    <title>JMX Proxy</title>
    <author email="roland@jolokia.org">Roland Huss</author>
  </properties>
  <body>
    <section name="JMX Proxy">
      <div class="feature_icon_large">
        <img src="../images/features/proxy_large.png" alt="JMX Proxy"/>
      </div>
      <p>
        There are situations, where a deployment of an Jolokia agent
        on the target platform is not possible. This might be for
        political reasons or an already established JSR-160 export on
        the instrumented servers. In these environments, Jolokia can
        operate as a <strong>JMX Proxy</strong>. In this setup, the
        agent is deployed on a dedicated proxy JEE server (or other
        supported agent platform). The proxy bridges between Jolokia
        JSON request and responses to remote JSR-160 calls to the
        target server. The following diagrams gives an illustration of
        this setup.
      </p>
      <div align="center" style="margin: 20px 120px;">
        <img src="../images/jolokia_proxy.png" alt="Proxy Mode"/>
      </div>
      <p>
        A Jolokia proxy is universal and agnostic to the target server
        as it gets its information for the target via an incoming
        request (the same as for an HTTP proxy). Due to this required
        extended information, only Jolokia POST requests can be used
        for proxying since there is currently no way to encapsulate
        the target information within a GET Url. The base Jolokia URL
        for the request is that of the proxy server, whereas the
        target parameters are included in the request. In the next
        example, a proxied Jolokia request queries the number of
        active threads for a server <code>jboss-as</code> via a proxy
        <code>tomcat-proxy</code>, which has an agent deployed under
        the context <code>jolokia</code>. The agent URL then is
        something like
      </p>
      <pre>
http://jolokia-proxy:8080/jolokia</pre>
      <p>and the POST payload of the request is</p>
      <pre class="prettyprint">
  {
    "type":"READ"
    "mbean":"java.lang:type=Threading",
    "attribute":"ThreadCount",
    "target": { 
                "url":"service:jmx:rmi:///jndi/rmi://jboss-as:8686/jmxrmi",
                "password":"admin",
                "user":"s!cr!t"
              },
  }
</pre>
      <p>
        The target is part of the request and can contain
        authentication information as well (with params
        <code>user</code> and <code>password</code>)
      </p>
      <subsection name="Limitations">
        <p>
          Operating Jolokia as a JMX proxy has some limitations
          compared to a native agent deployment:
        </p>
        <ul>
          <li>
            <a href="bulk-requests.html">Bulk requests</a> are
            possible but not as efficient as for direct operation. The
            reason is, that JSR-160 remoting doesn't know about bulk
            requests, so that a Jolokia bulk request arriving at the
            proxy gets dispatched into multiple JSR-160 requests for the
            target. The JSR-160 remote connection has to be
            established only once, though.             
          </li>
          <li>
            The JMX target URL addresses the MBeanServer directly, so
            MBeanServer merging as it happens for direct operation is
            not available. Also, certain workarounds for bugs in the
            server's JMX implementation are not available. (e.g. see
            this <a href="http://labs.consol.de/blog/jmx4perl/jboss-remote-jmx/">blog post</a> for a JBoss bug when  
            accessing MXBeans in the PlatformMBeanServer)
          </li>
          <li>
            When no-standard Java types are returned by JMX operations
            or attribute read calls, these types must be available on
            the proxy, too. Using the Jolokia agent directly, complex
            data types are serialized deeply into a JSON
            representation automatically. 
          </li>
          <li>
            For each Jolokia request, a new JMX connection (likely
            using RMI) is created which is an expensive operation. A
            future version of Jolokia will tackle this by providing
            some sort of optional JSR-160 connection pooling.
          </li>
        </ul>
      </subsection>
      <subsection name="Next">
        <ul>
          <li>
            See why how Jolokia can <a href="security.html">secure</a> JMX access in a very fine granular way.
          </li>
          <li>
            Learn something about <a href="bulk-requests.html">bulk JMX requests</a>.
          </li>
          <li>
            Go Back to the <a href="../features-nb.html">Features Overview</a>.
          </li>
        </ul>
      </subsection>
    </section>
  </body>    
</document>

