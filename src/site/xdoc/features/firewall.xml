<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2009-2013 Roland Huss
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  
  <properties>
    <title>Firewall friendly</title>
    <author email="roland@jolokia.org">Roland Huss</author>
  </properties>

  <body>
    <section name="Firewall friendly">
      <div class="feature_icon_large">
        <img src="../images/features/firewall_large.png" alt="Firewall"/>
      </div>
      <p>
        Since Jolokia uses HTTP (or HTTPS) for its transport protocol,
        it plays nicely with even complex firewall setups. For the
        client within a firewall it is easy to access Jolokia agents
        outside over an HTTP proxy, even over multiple hops. Also
        since HTTP is such a widely adopted protocol, it is much
        better accepted than RMI, which mostly specific to the Java
        world (or CORBA world if using IIOP). Hence chances are much
        higher to get an agreement with the firewall policies in
        place. 
      </p>
      <p>
        Since HTTP use a single, fixed port it is easy to let Jolokia
        communicate through an SSH tunnel, too. This is not easy with
        the standard JSR-160 protocol RMI, which uses random
        ports. There are solutions to fix the port, but they are
        horrible <a href="">horrible</a> complicated.
      </p>
      <p>
        With Jolokia's <a href="proxy.html">proxy mode</a> there are
        even more options to let the Java servers without any agent
        within the firewall to be reached from the outside over HTTP. 
      </p>
      <p>
        There has been efforts to put JSR-160 on a different protocol
        stack, but they are either not a standard solution, requiring
        a special client setup (like <a href="">MX4J</a>) or seemed to
        have been dropped (<a href="">WS connector</a> which uses SOAP
        had its last pre-release in October 2008). Up to now, the only
        solution which allows for a smooth, firewall friendly setup is
        a JMX Bridge (or Proxy), like Jolokia.
      </p>
      <subsection name="Next">
        <ul>
          <li>
            See why jolokia is the <a href="polyglot.html">perfect choice</a> for non-Java environments 
            to access Java servers via JMX.
          </li>
          <li>
            Jolokia is <a href="simple.html">simple</a>. Really.
          </li>
          <li>
            Go Back to the <a href="../features-nb.html">Features Overview</a>.
          </li>
        </ul>
      </subsection>
    </section>
  </body>    
</document>

