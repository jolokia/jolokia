<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2009-2013 Roland Huss
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  
  <properties>
    <title>Bulk Requests</title>
    <author email="roland@jolokia.org">Roland Huss</author>
  </properties>

  <body>
    <section name="Bulk Requests">
      <div class="feature_icon_large">
        <img src="../images/features/bulk_requests_large.png" alt="Bulk-Requests"/>
      </div>
      <p>
        In order to monitor Java application servers, a multitude of
        parameters can be observed. Memory and thread consumption,
        database connection pool utilisation, HTTP request response
        for various web application are examples for valuable metrics
        to monitor. Typically, 10-20 monitored attributes are a good
        setup for a single JEE server.
      </p>
      <p>
        With the traditional approach using JSR-160 JMX connectors,
        a connection is opened, and for each attribute queried a
        separate RMI (or optional JMXMP) request needs to be send to
        the server resulting in several client-server turnarounds. 
        Wouldn't it be nice to use a single request for querying all
        those parameters ?
      </p>
      <p>
        With Jolokia's <strong>bulk requests</strong> this is a piece
        of cake. A single HTTP POST request can carry a list of JSON
        request objects, which are dispatched by the Jolokia agent on
        the server side into multiple local JMX calls. The results are
        collected and returned as list of JSON response objects. In
        case of an exception when executing the JMX call, the error is
        propragated as part of the response without influencing the
        other results.
      </p>
      <subsection name="Example">
        <p>
          Let's have a look at an example.  Jolokias client libraries
          (currently available for <a
          href="../client/java.html">Java</a> and <a
          href="../client/perl.html">Perl</a>) make the usage of bulk
          request easy by providing an extra layer of abstraction:
        </p>
        <pre class="prettyprint"><![CDATA[
  J4pRequest req1 = new J4pExecRequest("java.lang:type=Memory","gc");
  J4pRequest req2 = new J4pReadRequest("java.lang:type=Memory","HeapMemoryUsage");
  List<J4pResponse<J4pRequest>> responses = j4pClient.execute(req1,req2);
  Map memVals = responses.get(1).getValue();
  System.out.println("Memory used: " + memVals.get("used"));]]></pre>
        <p>
          This gets translated in the following JSON request, which is
          transmitted to the agent via an HTTP POST request (the URL has
          been set up in the <code>j4pClient</code> object above):
        </p>
        <pre class="prettyprint"><![CDATA[
   [{ "operation":"gc",
      "mbean":"java.lang:type=Memory",
      "type":"EXEC" 
    },
    {
      "mbean":"java.lang:type=Memory",
      "attribute":"HeapMemoryUsage",
      "type":"READ"
    }]]]></pre>
        <p>
          The answer returned is also represented in JSON and looks like
          this:      
        </p>
        <pre class="prettyprint"><![CDATA[
   [{ "timestamp":1285442161,
      "status":200,
      "request": { "mbean":"java.lang:type=Memory",
                    "operation":"gc",
                    "type":"exec" },
      "value":null
     },
     {
      "timestamp":1285442161,
      "status":200,
      "request": { "mbean":"java.lang:type=Memory",
                   "attribute":"HeapMemoryUsage",
                   "type":"read" },
      "value": {"max":"129957888",
                "committed":"85000192",
                "init":"0",
                "used":"3660720" }
     }]]]></pre>      
        <p>
          Another example how bulk requests can be used is the <a
          href="http://www.nagios.org/">Nagios</a> 
          Plugin <a
          href="http://search.cpan.org/~roland/jmx4perl/scripts/check_jmx4perl">check_jmx4perl</a>,
          which uses bulk requests 
          for its <em>multi check</em> features, which allows for a
          single Nagios check monitor as many JMX attributes and
          operations as required.
        </p>
      </subsection>
      <subsection name="Next">
        <ul>
          <li>
            Learn more about Jolokia's <a href="proxy.html">Proxy Mode</a> and agentless operation.
          </li>
          <li>
            Read an introduction and <a href="overview.html">overview</a> for Jolokia.
          </li>
          <li>
            Go Back to the <a href="../features-nb.html">Features Overview</a>.
          </li>
        </ul>
      </subsection>
    </section>
  </body>    
</document>

