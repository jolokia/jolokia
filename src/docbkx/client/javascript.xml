<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2009-2013 Roland Huss
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<section id="client-javascript">
  <title>Javascript Client Library</title>
  <para>
    The Jolokia Javascript library provides a Javascript API to the 
    to the Jolokia agent. It comes with two layers, a
    basic one which allows for sending Jolokia requests to the agent
    synchronously or asynchronously and one with a simplified API
    which is less powerful but easier to use. This library supports
    bulk requests, HTTP GET and POST requests and JSONP for querying
    agents which are located on a different server.
  </para>
  <para>
    All methods of this library are available via the
    <classname>Jolokia</classname> client object, which needs to be
    instantiated up-front. In the following example a client object is
    created and the used heap memory is requested synchronously via
    the simple API. The agent is deployed within the same webarchive
    which also serves this script.
  </para>
  <programlisting language="javascript"><![CDATA[
var j4p = new Jolokia("/jolokia");
var value = j4p.getAttribute("java.lang:type=Memory","HeapMemoryUsage","used");
console.log("Heap Memory used: " + value);     
]]></programlisting>
  <section id="js-installation">
    <title>Installation</title>
    <para> 
      The Jolokia Javascript library is distributed in two parts, in
      compressed and uncompressed forms:
    </para>    
    <variablelist>
      <varlistentry>
        <term><filename>jolokia.js</filename> and
        <filename>jolokia-min.js</filename></term>
        <listitem>
          <para>
            Base library containing the Jolokia object definition
            which carries the <methodname>request()</methodname>
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><filename>jolokia-simple.js</filename> and <filename>jolokia-simple-min.js</filename></term>
        <listitem>
          <para>
            Library containing the Jolokia simple API and which builds
            up on <filename>jolokia.js</filename> It must be included
            after <filename>jolokia.js</filename> since it adds methods
            to the <classname>Jolokia</classname> object definition.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>
      All four files can be obtained from the <ulink
      url="/download.html">download
      page</ulink>. For production environments the compressed version
      is highly recommended since the extensive API documentation
      included in the original version is stripped off here. For Maven
      users there is an even better way to integrate them, described in
      <xref linkend="js-maven"/>.
    </para>
    <para>
      <filename>jolokia.js</filename> uses <ulink
      url="http://www.jquery.com">jQuery</ulink>, which must be
      included as well. If the target platform doesn't support native
      JSON serialization, <ulink
      url="https://github.com/douglascrockford/JSON-js">json2.js</ulink>
      needs to be included as well. As sample HTML head for including
      all necessary parts looks like:
    </para>
    <programlisting language="html"><![CDATA[
<head>
  <script src="jquery-1.7.2.js"></script>
  <script src="json2.js"></script>
  <script src="jolokia-min.js"></script>
  <script src="jolokia-simple-min.js"></script>
</head>
]]></programlisting>
    <para>
      A Jolokia client is always created as an instance of
      <classname>Jolokia</classname>. Requests to the agent are sent
      by calling methods on this object. The constructing function
      takes a plain object, which provides default parameters which
      are used in the <methodname>request()</methodname> if no
      overriding are given there.
    </para>
  </section>
  
  <section id="js-request">    
    <title>Usage</title>
    <para>
      All function of this library are available as methods of the
      <classname>Jolokia</classname> object. The options needs to be
      instantiated as usual and takes a set of default options, which
      can be overwritten by subsequent requests. On the most basic
      layer is a single <methodname>request()</methodname> method,
      which takes two arguments: A request object and an optional
      options object. For example, a synchronous request for obtaining
      the agent's version for a agent running on the same server which
      delivered the Javascript looks like:
    </para>
    <programlisting language="javascript"><![CDATA[
var j4p = new Jolokia({url: "/jolokia"});
var response = j4p.request({type: "version"},{method: "post"});
console.log("Agent Version: " + response.value.agent);]]></programlisting>
    <para>
      If the constructor is used with a single string argument, this
      value is considered to be the agent's access URL. I.e. in the
      example above the construction of the
      <classname>Jolokia</classname> could have been performed with a
      single string argument (<code>new Jolokia("/jolokia")</code>).
    </para>
    <section id="js-request-format">
      <title>Requests</title>
      <para>
        Jolokia requests and responses are represented as JSON
        objects. They have exactly the same format, which is expected
        and returned by the agent as defined in <xref
        linkend="protocol"/> for POST requests. All request types are
        supported.
      </para>
      <para>
        The <methodname>request()</methodname> expects as its first
        argument either a single request object or, for bulk requests,
        an array of request objects. Depending on this for synchronous
        operations either a single response JSON object is returned or
        an array of responses (in the order of the initial request
        array). For asynchronous request one or more callbacks are
        called for each response separately. See <xref
        linkend="js-request-sync-async"/> for details.
      </para>
      <para>
        The following example shows a single and bulk request call to
        the Jolokia agent:
      </para>
      <programlisting language="javascript"><![CDATA[
var j4p = new Jolokia({url: "/jolokia"});
var req1 = { type: "read", mbean: "java.lang:type=Memory", attribute: "HeapMemoryUsage" };
var req2 = { type: "list" };
var response = j4p.request(req1);
var responses = j4p.request([ req1, req2 ]);]]></programlisting>
    </section>
    <section id="js-request-options">    
      <title>Request options</title>
      <para>
        Each request can be influenced by a set of optional options
        provided either as default during construction of the
        <classname>Jolokia</classname> object or as optional last
        parameter for the request object. Also a request can carry a
        <constant>config</constant> attribute, which can be used for all
        processing parameters (<xref linkend="processing-parameters"/>).
        The known options are summarized in <xref linkend="js-request-options-table"/>
      </para>      
      <table id="js-request-options-table">
        <title>Request options</title>
        <thead>
          <tr>
            <td>Key</td>
            <td>Description</td>
          </tr>        
        </thead>
        <tr>
          <td><constant>url</constant></td>
          <td>Agent URL (mandatory)</td>
        </tr>
        <tr>
          <td><constant>method</constant></td>
          <td>
            Either "post" or "get" depending on the desired HTTP method
            (case does not matter).  Please note, that bulk requests are
            not possible with "get". On the other hand, JSONP requests
            are not possible with "post" (which obviously implies that
            bulk request cannot be used with JSONP requests). Also, when
            using a <constant>read</constant> type request for multiple
            attributes, this also can only be sent as "post"
            requests. If not given, a HTTP method is determined
            dyamically. If a method is selected which doesn't fit to the
            request, an error is raised.
          </td>
        </tr>
        <tr>
          <td><constant>jsonp</constant></td>
          <td>
            Whether the request should be sent via JSONP (a technique
            for allowing cross domain request circumventing the infamous
            "same-origin-policy"). This can be used only with HTTP "get"
            requests.
          </td>
        </tr>
        <tr>
          <td><constant>success</constant></td>
          <td>
            Callback function which is called for a successful
            request. The callback receives the response as single
            argument. If no <constant>success</constant> callback is given, then
            the request is performed synchronously and gives back the
            response as return value. The value can be an array of
            functions which is used for bulk requests to dispatch
            multiple responses to multiple callbacks. See <xref
            linkend="js-request-sync-async"/> for details.
          </td>
        </tr>
        <tr>
          <td><constant>error</constant></td>
          <td>
            Callback in case a Jolokia error occurs. A Jolokia error is
            one, in which the HTTP request suceeded with a status code
            of 200, but the response object contains a status other than
            OK (200) which happens if the request JMX operation
            fails. This callback receives the full Jolokia response
            object (with a key <constant>error</constant> set). If no error
            callback is given, but an asynchronous operation is
            performed, the error response is printed to the Javascript
            console by default.
          </td>
        </tr>
        <tr>
          <td><constant>ajaxError</constant></td>
          <td>
            Global error callback called when the Ajax request itself
            failed. It obtains the same arguments as the error callback
            given for <methodname>jQuery.ajax()</methodname>, i.e. the
            <classname>XmlHttpResonse</classname>, a text status and an
            error thrown. Refer to the jQuery documentation for more
            information about this error handler.
          </td>
        </tr>
        <tr>
          <td><constant>username</constant></td>
          <td>A username used for HTTP authentication</td>
        </tr>
        <tr>
          <td><constant>password</constant></td>
          <td>A password used for HTTP authentication</td>
        </tr>
        <tr>
          <td><constant>timeout</constant></td>
          <td>Timeout for the HTTP request</td>
        </tr>
        <tr>
          <td><constant>maxDepth</constant></td>
          <td>Maximum traversal depth for serialization of complex return values</td>
        </tr>
        <tr>
          <td><constant>canonicalProperties</constant></td>
          <td>Defaults to true for canonical (sorted) property lists on object names; if set to "false" then they are turned in their unsorted format.</td>
        </tr>
        <tr>
          <td><constant>maxCollectionSize</constant></td>
          <td>
            Maximum size of collections returned during serialization.
            If larger, the collection is returned truncated.
          </td>
        </tr>
        <tr>
          <td><constant>maxObjects</constant></td>
          <td>
            Maximum number of objects contained in the response.
          </td>
        </tr>
        <tr>
          <td><constant>ignoreErrors</constant></td>
          <td>
            If set to true, errors during JMX operations and JSON
            serialization are ignored. Otherwise if a single
            deserialization fails, the whole request returns with an
            error. This works only for certain operations like pattern
            reads.
          </td>
        </tr>
        <tr>
          <td><constant>serializeException</constant></td>
          <td>
            If true then in case of an error, the exception itself is returned in 
            it JSON representation under the key <constant>error_value</constant> 
            in the response object.
          </td>
        </tr>
        <tr>
          <td><constant>includeStackTrace</constant></td>
          <td>
            By default, a stacktrace is returned with every error (key: <constant>stacktrace</constant>)
            This can be ommitted by setting the value of this option to false.
          </td>
        </tr>
        <tr>
          <td><constant>ifModifiedSince</constant></td>
          <td>
            The <constant>LIST</constant> operations provides an
            optimization in that it remembers, when the set of
            registered MBeans has been changes last. If a timestamp
            (in epoch seconds) is provided with this parameter, then
            the LIST operation returns an empty response
            (i.e. <constant>value</constant> is null) and a
            <constant>status</constant> code of 304 (Not Modified) if
            the MBeans haven't changed. If you use the request
            scheduler (<xref linkend="js-request-options-table"/>)
            then this feature can be used to get the callbacks called
            only if a value is returned. For the normal request, the
            error callback is called which must check the status itself.
          </td>
        </tr>
      </table>
    </section>
    <section id="js-request-sync-async">
      <title>Operational modes</title>
    </section>    
    <para>
      Requests can be send either synchronously or asynchronously via
      Ajax. If a <constant>success</constant> callback is given in the
      request options, the request is performed asynchronously via an
      Ajax HTTP request. The callback gets these arguments: a Jolokia JSON
      response object (see <xref linkend="request-response"/>) and an
      integer index indicating for which response this callback is being
      called. For bulk requests, this index corresponds to the array
      index of the request which lead to this response. The value of
      this option can be an array of callback functions which are
      called in a round robin fashion when multiple responses are
      received in case of bulk requests. These callbacks are called
      only when the returned Jolokia response has a status code of
      <constant>200</constant>, otherwise the callback(s) given with
      the <constant>error</constant> option are consulted. If no error
      callback is given, the error is printed on the console by
      default. As for success callbacks, error callbacks reveive the
      Jolokia error response as a JSON object.
    </para>
    <para>
      The following example shows asynchronous requests for a single
      Jolokia request as well as for bulk request with multiple
      callbacks.
    </para>
    <programlisting language="javascript"><![CDATA[
var j4p = new Jolokia("/jolokia");

// Single request with a single success callback
j4p.request(
  { type: "read", mbean: "java.lang:type=Memory", attribute: "HeapMemoryUsage"},
  { success: function(response) {
       if (response.value.used / response.value.max > 0.9) {
          alert("90% of heap memory exceeded");
       }
    }, 
    error: function(response) {
       alert("Jolokia request failed: " + response.error);
    } 
  }
);

// Bulk request with multiple callbacks
j4p.request(
  [ 
    { type: "read", mbean: "java.lang:type=Threading", attribute: "ThreadCount"},
    { type: "read", mbean: "java.lang:type=Runtime", attribute: ["VmName", "VmVendor"]}
  ],
  { success: [ 
               function(response) {
                  console.log("Number of threads: " + response.value);
               }, 
               function(response) {
                  console.log("JVM: " + response.value.VmName + " -- "
                                      + response.value.VmVendor);
               }
             ],
    error: function(response) {
       alert("Jolokia request failed: " + response.error);
    } 
  }
);]]></programlisting>    
    <para>    
      Both callbacks, <constant>success</constant> and
      <constant>error</constant>, are only called when the Ajax
      request succeeds. In case of an error on the HTTP level, the
      callback <constant>ajaxError</constant> is called with the
      <classname>XMLHttpRequest</classname>, a
      <constant>textStatus</constant> and an optional exception
      object. It has the same signature as the underlying
      <constant>error</constant> callback of the
      <code>jQuery.ajax()</code> call. (See the <ulink
      url="http://api.jquery.com/jQuery.ajax/">jQuery documentation</ulink>
      for details).
    </para>
    <para>
      The Jolokia agent also supports <ulink
      url="http://en.wikipedia.org/wiki/JSONP">JSONP</ulink> requests
      for cases where the Jolokia agent is served on a different server or port
      than the Javascript client. By default, such access is forbidden by the so called
      <emphasis>same-origin-policy</emphasis>. To swith on JSONP, the
      option <constant>jsonp</constant> should be set to
      <constant>"true"</constant>. 
    </para>
    <para>
      As explained in <xref linkend="request-response"/> the Jolokia
      agent supports two HTTP methods, <constant>GET</constant> and
      <constant>POST</constant>. <constant>POST</constant> is more
      powerful since it supports more features. e.g. bulk requests and
      JMX proxy requests are only possible with POST. By default, the
      Jolokia Javascript library selects an HTTP method automatically,
      which is <code>GET</code> for simple cases and <code>POST</code>
      for more sophisticated requests. The HTTP method can be
      overridden by setting the option <constant>method</constant> to
      <constant>"get"</constant> or <constant>"post"</constant>.
    </para>
    <para>
      There are some limitations in choosing the HTTP method depending
      on the request and other options given:
    </para>
    <itemizedlist>
      <listitem>
        Bulk requests (i.e. an array of multiple requests) can only be
        used with <constant>POST</constant>.
      </listitem>
      <listitem>
        <constant>READ</constant> requests for multiple attributes
        (i.e. the <constant>attribute</constant> request parameter is
        an array of string values) can only be used with
        <constant>POST</constant>. 
      </listitem>
      <listitem>
        The JMX proxy mode (see <xref linkend="proxy"/>) can only be used
        with <constant>POST</constant>. 
      </listitem>
      <listitem>
        JSONP can only be used with <constant>GET</constant> and only
        in asynchronous mode (i.e. a <constant>success</constant>
        callback must be given). This is a limitation of the JSONP
        technique itself.
      </listitem>
    </itemizedlist>
    <para>
      The restrictions above imply, that JSONP can only be used for
      single, simple requests and not for JMX proxy calls. 
    </para>
  </section>
  
  <section id="js-simple">
    <title>Simple API</title>
    <para>
      Building upon the basic
      <methodname>Jolokia.request()</methodname> method, a simplified
      access API is available. It is contained in
      <filename>jolokia-simple.js</filename> which must be included after
      <filename>jolokia.js</filename>. This API provides dedicated
      method for the various request types and supports all options as
      described in <xref linkend="js-request-options-table"/>. There
      is one notable difference for asynchronous callbacks and
      synchronous return values though: In case of a successful call,
      the callback is fed with the response's
      <constant>value</constant> object, not the full response
      (i.e. <code>response.value</code>). Similar, for synchronous
      operations the value itself is returned. In case of an error,
      either an <constant>error</constant> callback is called with the
      full response object or an <classname>Error</classname> is
      thrown for synchronous operations. 
    </para>
    <variablelist>
      <varlistentry>
        <term>getAttribute(mbean,attribute,path,opts)</term>
        <listitem>
          <para>
            This method returns the value of an JMX attribute
            <code>attribute</code> of an MBean <code>mbean</code>. A path
            can be optionally given, and the optional request options are
            given as last argument(s). The return value for synchronous
            operations are the attribute's value, for asynchronous
            operations (i.e. <code>opts.success != null</code>) it is
            <constant>null</constant>. See <xref linkend="read"/> for
            details. 
          </para>
          <para>
            For example, the following method call can be used
            to synchronously fetch the current heap memory usage:
          </para>
          <programlisting language="javascript"><![CDATA[
var memoryUsed = j4p.getAttribute("java.lang:type=Memory","HeapMemoryUsage","used");
]]></programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>setAttribute(mbean,attribute,value,path,opts)</term>
        <listitem>
          <para>
            For setting an JMX attribute, this method takes the MBean's
            name <code>mbean</code>, the attribute
            <code>attribute</code> and the value to set as
            <code>value</code>. The optional <code>path</code> is the
            <emphasis>inner path</emphasis> of the attribute on which
            to set the value (see <xref linkend="write"/> for
            details). The old value of the attribute is returned or
            given to a <constant>success</constant> callback.
          </para>
          <para>
            To enable verbose mode in the memory-handling beans, use
          </para>
          <programlisting language="javascript"><![CDATA[
var gsLoggingWasOn = j4p.setAttribute("java.lang:type=Memory","Verbose",true);
]]></programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>execute(mbean,operation,arg1,arg2,...,opts)</term>
        <listitem>
          <para>
            With this method, a JMX operation can be executed on the
            MBean <code>mbean</code>. Beside the operation's name
            <code>operation</code>, one or more arguments can be given
            depending on the signature of the JMX operation. The
            return value is the return value of the operation. See
            <xref linkend="exec"/> for details.
          </para>
          <para>
            The following exampled asynchronously fetches a thread dump
            as a JSON object and logs it into the console:
          </para>
          <programlisting language="javascript"><![CDATA[
j4p.execute("java.lang:type=Threading","dumpAllThreads",true,true,
              {
                 success: function(value) {
                     console.log(JSON.stringify(value));
                 }        
              });
]]></programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>search(mBeanPattern,opts)</term>
        <listitem>
          <para>
            Searches for one or more MBeans whose object names fit the
            pattern <code>mBeanPattern</code>. The return value is a list
            of strings with the matching MBean names or <code>null</code>
            if none is found. See <xref linkend="search"/> for details.            
          </para>
          <para>
            The following example looks up all application servers
            available in all domains: 
          </para>
          <programlisting language="javascript"><![CDATA[
var appServerNames = j4p.search("*:j2eeType=J2EEServer,*");
]]></programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>list(path,opts)</term>
        <listitem>
          <para>
            For getting meta information about registered MBeans,
            the <methodname>list</methodname> command can be used. The
            optional <code>path</code> points into this meta
            information for retrieving partial information. The format
            of the return value is described in detail in <xref
            linkend="list"/>.
          </para>
          <para>
            This example fetches only the meta information for the
            attributes of the
            <code>java.lang:type=OperatingSystem</code> MBean:
          </para>
          <programlisting language="javascript"><![CDATA[
var attributesMeta = j4p.list("java.lang/type=OperatingSystem/attr");
]]></programlisting>     
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>version(opts)</term>
        <listitem>
          <para>
            The <methodname>version</methodname> method returns the
            agent's version, the protocol version, and possibly some
            additional server-specific information. See
            <xref linkend="version"/> for more information about this
            method.
          </para>
          <para>
            A sample return value for a Glassfish server looks like:
          </para>
          <programlisting language="javascript"><![CDATA[
{
  protocol: "4.0",
  agent: "0.82",
  info: {
     product: "glassfish",
     vendor": "Sun",
     extraInfo: {
          amxBooted: false
     }
}]]></programlisting>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section id="js-poller">
    <title>Request scheduler</title>
    <para>
      A <classname>Jolokia</classname> object can be also used for
      periodically sending requests to the agent. Therefore requests
      can be registered to the client object, and a poller can be
      started and stopped. All registered requests are send at once
      with a single bulk request so this is a quite efficient method for
      periodically polling multiple values.
    </para>
    <para>
      Here is a simple example, which queries the heap memory usage
      every 10 seconds and prints out the used memory on the console:
    </para>
          <programlisting language="javascript"><![CDATA[
var j4p = new Jolokia("/jolokia")
handle = j4p.register(function(resp) {
   console.log("HeapMemory used: " + resp.value);
 },
 { type: "READ", mbean: "java.lang:type=Memory", attribute: "HeapMemoryUsage", path: "used"});

j4p.start(10000);
]]></programlisting>
    <variablelist>
      <varlistentry>
        <term>handle = j4p.register(callback,request,request,....)</term>
        <listitem>
          <para>
            This method registers one or more request for being
            periodically fetched. <code>callback</code> can be either a
            function or an object.
          </para>
          <para>
            If a function is given or an object with an attribute
            <code>callback</code> holding a function, then this
            function is called with all responses received as
            argument, regardless whether the individual response
            indicates a success or error state.
          </para>
          <para>
            If the first argument is an object with two callback
            attributes <code>success</code> and <code>error</code>,
            these functions are called for <emphasis>each</emphasis> response
            separately, depending whether the response indicates
            success or an error state. If multiple requests have been
            registered along with this callback object, the callback
            is called multiple times, one for each request in the same
            order as the request are given.  As second argument, the
            handle which is returned by this method is given and as
            third argument the index within the list of requests.
          </para>
          <para>
            If the first argument is an object, an additional
            <constant>config</constant> attribute with processing
            parameters can be given which is used as default for the
            registered requests. Requests with a
            <constant>config</constant> section take precedence.
          </para>            
          <para>
            Furthermore, if a <constant>onlyIfModified:
            true</constant> exists in the callback object, then the
            <constant>sucess</constant> and <constant>error</constant>
            callbacks are called only if the result changed on the
            server side. Currently, this is supported for the
            <constant>list</constant> operation only in which case the
            callback is only called when MBean has been registered or
            deregistered since the last call of the scheduler. If a
            single <constant>callback</constant> function is used
            which gets all responses for a job at once, then this
            function is called only with the responses, which carry a
            value. If none of the registered requests produced a
            response with value (i.e. the server decided that there
            was no update for any request), then a call to the callback function is
            skipped competely.
          </para>
          <para>
            <code>register()</code> returns a handle which can be used
            later for unregistering these requests.
          </para>
          <para>
            In the following example two requests are registered along
            with a single callback function, which takes two responses
            as arguments:
          </para>
          <programlisting language="javascript"><![CDATA[
handle = j4p.register(function(resp1,resp2) {
   console.log("HeapMemory used: " + resp1.value);
   console.log("ThreadCount: " + resp2.value);
 },
 { type: "READ", mbean: "java.lang:type=Memory", attribute: "HeapMemoryUsage", path: "used"},
 { type: "READ", mbean: "java.lang:type=Threading", attribute: "ThreadCount"});
]]>
          </programlisting>
          <para>
            In the next example, a dedicated <code>success</code>
            and <code>error</code> callback are provided, which are
            called individually for each request (in the given
            order):
          </para>
          <programlisting language="javascript"><![CDATA[
j4p.register(
  {
    success: function(resp) {
       console.log("MBean :" + resp.mbean + ", attr:  " + resp.attribute + ", value: " + resp.value);
    },
    error: function(resp) {
       console.log("Error: " + resp.error_text);
    },
    config: {
       serializeException: true
    },
    onlyIfModified: true
  },
  { type: "LIST", config: { maxDepth: 2}},
  { type: "READ", mbean: "java.lang:type=Threading", 
    attribute: "ThreadCount", config: { ignoreErrors: true }},
  { type: "READ", mbean: "bla.blu:type=foo", attribute: "blubber"});
]]>
          </programlisting>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>j4p.unregister(handle)</term>
        <listitem>
          <para>
            Unregister one or more requests registered with
            <code>handle</code> so that they are no longer polled
            with the scheduler.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>j4p.jobs()</term>
        <listitem>
          <para>
            Return an array of handles for all registered jobs. This array can be freely manipulated, its a copy of
            the handle list.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>j4p.start(period)</term>
        <listitem>
          <para>
            Startup the scheduler for requeting the agent every
            <code>period</code> milliseconds. If the scheduler is
            already running, it adapts its scheduling period according
            to the given argument. If no <code>period</code> is given,
            the period provided during construction time (with the
            option <code>fetchInterval</code>) is used. The default
            value is 30 seconds. 
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>j4p.stop()</term>
        <listitem>
          <para>
            Stop the scheduler. If the scheduler is not running,
            nothing happens. The scheduler can be restarted after it
            has been stopped. 
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>j4p.isRunning()</term>
        <listitem>
          <para>
            Checks whether the scheduler is running. Returns
            <code>true</code> if this is the case, <code>false</code>
            otherwise. 
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
  
  <section id="js-cubism">
    <title>Jolokia as a Cubism Source</title>
    <para>
      <ulink url="http://square.github.com/cubism/">Cubism</ulink> is a Javascript library for
      plotting time-series data and is based on <ulink
      url="http://d3js.org/">d3.js</ulink>. Jolokia comes with a plugin for Cubism and
      can act as a data source. The usage is quite simple: After
      creating a Jolokia Cubism source, one or more JSON request can
      be registered, which are queried periodically. No matter how
      many requests are registered, only a single HTTP request is sent
      to the server after each period. Cubism is then responsible for
      plotting the data.
    </para>
    <para>
      <xref linkend="fig-jolokia-cubism-example"/>  shows a sample for a memory plot. More examples can
      be found on this <ulink url="../../client/javascript-cubism.html">page</ulink>.
    </para>
    <figure id="fig-jolokia-cubism-example">
      <title>Horizon Chart for Heap-Memory Usage</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="jolokia-cubism-memory-horizon.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>
      <filename>jolokia-cubism.js</filename> can be downloaded from
      the <ulink url="/download.html">downlad page</ulink> and also
      comes with a minified version. As dependencies it requires
      <ulink url="/download.html">jolokia.js</ulink>, <ulink
      url="http://www.jquery.com">JQuery</ulink>, <ulink
      url="http://square.github.com/cubism/">Cubism</ulink> and <ulink
      url="http://d3js.org/">d3.js</ulink>. <filename>jolokia-cubism.js</filename>
      registers itself as an <ulink
      url="http://requirejs.org/docs/whyamd.html">AMD</ulink> module
      if running within an AMD environment.
    </para>
    <para>
      In order to use Jolokia with Cubism, you first need to create a
      Cubism <ulink url="https://github.com/square/cubism/wiki/Context">context</ulink>. Next use
      <code>context.jolokia()</code> for creating a connection to the
      Jolokia agent.
    </para>
    <programlisting language="javascript"><![CDATA[var context = cubism.context();
  
// Create a source for Jolokia metrics pointing to the agent 
// at 'http://jolokia.org/jolokia'
var jolokia = context.jolokia("http://jolokia.org/jolokia");]]></programlisting>
    <para>
      The method <methodname>context.jolokia()</methodname> can take various
      kind of arguments: 
    </para>
    <itemizedlist>
      <listitem>
        <para>
          A single string as in the example above is used as the
          agent's URL. Additionally, options as key-value pairs can be
          given as an additional argument. The possible keys are
          described in <xref linkend="js-request-options-table"/>. If
          the URL is omitted, but only an option object is provided,
          then this object must also contain a key <code>url</code>
          for specifying the agent URL.
        </para>  
      </listitem>
      <listitem>
        <para>
          Alternatively, an already instantiated Jolokia object can be
          provided as single argument, which then is used for all
          communications to the server. 
        </para>
      </listitem>
    </itemizedlist>
    <para>
      From this source object, a <ulink
      url="https://github.com/square/cubism/wiki/Metric">metric</ulink>
      object can be easily created. This metric object embrasses one
      or more Jolokia requests which are send to the server
      periodically. The response(s) are then used for calculating a
      single numerical value which gets plotted. For example:
    </para>
    <programlisting language="javascript"><![CDATA[
// Read periodically the Heap-Memory use and take 'HeapMemory Usage' as name/label.
var metricMem = jolokia.metric({
                      type: 'read', 
                      mbean: 'java.lang:type=Memory',
                      attribute: 'HeapMemoryUsage',
                      path: 'used'
                  },"HeapMemory Usage"); 

// Example for a callback function for evaluating responses
// dynamically. In this case, the first
// argument is a function, which gets feed with all response objects
// (one in this case). The requests objects are given next, and an
// options object as last argument. 
var metricReq = jolokia.metric(
    function (resp) {
        var attrs = resp.value;
        var sum = 0;
        for (var key in attrs) {
            sum += attrs[key].requestCount;
        }
        return sum;
    },
    { 
        type: "read",
        mbean: "Catalina:j2eeType=Servlet,*",
        attribute:"requestCount"
    }, 
    { name: "All", delta: 101000});]]></programlisting>
    <para>
      <methodname>metric()</methodname> is a factory method which can be
      called in various ways.      
    </para>
    <itemizedlist>
      <listitem>
        <para>
          If the first argument is a Jolokia request object (i.e. not
          a function), this request is used for sending requests
          periodically.
        </para>
      </listitem>
      <listitem>
        <para>
          If the first argument is a function, this function is used
          for calculating the numeric value to be plotted. The rest of
          the arguments can be one or more request objects, which are
          registered and their responses are put as arguments to the
          given callback function.
        </para>
      </listitem>
      <listitem>
        <para>
          The last argument, if an object but not a Jolokia request
          (i.e. there is no <code>type</code> key), is 
          taken as an option object which is described below.
        </para>
      </listitem>
      <listitem>
        <para>
          Finally, if the last argument is a pure string, then this
          string is used as name for the chart.                      
        </para>
      </listitem>
    </itemizedlist>
    <para>
      An object which can be given as last argument is used for fine
      tuning the metrics:
    </para>
    <variablelist>
      <varlistentry>
        <term><constant>name</constant></term>
        <listitem>
          <para>
            Name used in charts. The name can also be given
            alternatively as a string directly as last argument (but
            then without any other options)
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><constant>delta</constant></term>
        <listitem>
          <para>
            Delta value in milliseconds for creating delta (velocity)
            charts. This is done by taking the value measured
            that many milliseconds ago and substract them from each other..
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><constant>keepDelay</constant></term>
        <listitem>
          <para>
            How many milliseconds before the oldest shown value should be
            kept in memory, which e.g. is necessary for delta
            charts. When <constant>delta</constant> is given, this
            value is implicetly set.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>    
    <para>
      One or more metric objects can now be converted to charts and
      added to a website with <filename>d3.js</filename>. This is done
      in the usual cubism way as described here. In our example, in
      order to append charts to a <constant>div</constant> with id
      <constant>chart</constant> the following code can be used:
    </para>
    <programlisting language="xml"><![CDATA[// Use d3 to attach the metrics with a specific graph type 
// ('horizon' in this case) to the document
d3.select("#charts").call(function(div) {
    div.append("div")
        .data([metricMem, metricReq])
        .call(context.horizon())
});]]></programlisting>
    <para>
      For a complete API documentation please refer to the <ulink
      url="https://github.com/square/cubism/wiki/API-Reference">Cubism API</ulink>.
    </para>
  </section>
  <section id="js-maven">
    <title>Maven integration</title>
    <para>
      For maven users' convenience, the Jolokia Javascript package is
      also available as a JavaScript artifact. It can be easily
      included with help of the
      <constant>javascript-maven-plugin</constant>.
    </para>
    <sidebar>
      <title>Recommended plugin</title>
      Unfortunately, the "offical" version of this plugin hosted on
      Codehaus has been stuck at version
        <code>1.0-alpha-1-SNAPSHOT</code>. Although it is quite
        usable, in order to avoid a snapshot dependency, it is
        recommended to use a fork of this plugin hosted on <ulink
        url="https://github.com/harlanji/javascript-maven-tools">GitHub</ulink> and deployed at the 
        <ulink url="https://oss.sonatype.org/content/groups/public">Sonatype Maven repository</ulink>.
      </sidebar>
      <para>
        The following example shows a sample configuration which could
        be used within a <filename>pom.xml</filename>:
      </para>
      <programlisting language="xml"><![CDATA[
<project>
...
  <dependencies>
    <dependency>
      <groupId>org.jolokia</groupId>
      <artifactId>jolokia-client-javascript</artifactId>
      <type>javascript</type>
      <version>1.0.5</version>
    </dependency>
    ....
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>com.devspan.mojo.javascript</groupId>
        <artifactId>javascript-maven-plugin</artifactId>
        <version>0.9.3</version>
        <extensions>true</extensions>
        <configuration>
          <useArtifactId>false</useArtifactId>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>war-package</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      ......
    </plugins>
   ....
  </build>
  ...
  <pluginRepositories>
    <pluginRepository>
      <id>sonatype-oss</id>
      <url>https://oss.sonatype.org/content/groups/public</url>
    </pluginRepository>
  </pluginRepositories>
</project>
]]></programlisting>
      <para>
        Then, in your webapp project, <filename>jolokia.js</filename>,
        <filename>jolokia-simple.js</filename> and
        <filename>json2.js</filename> can be found in the
        <filename>scripts/lib</filename> directory (relative to the
        top level of you WAR). In order to include it in your HTML
        files use something like this:
      </para>
      <programlisting language="html"><![CDATA[
<head>
  <script src="jquery-1.7.2.js"></script>
  <script src="scripts/libk/json2.js"></script>
  <script src="scripts/lib/jolokia.js"></script>
  <script src="scripts/lib/jolokia-simple.js"></script>
</head>]]></programlisting>
      <para>
        <filename>jQuery.js</filename> has to be included on its own,
        though and is not included within the dependency. If the
        compressed version of <filename>jolokia.js</filename> should
        be used, add a
        <code><![CDATA[classifier="compressed"]]></code> to the
        <constant>jolokia-client-javascript</constant> dependency, and
        include <filename>scripts/lib/jolokia-min.js</filename>
      </para>
      <para>
        A full working example can be found in the Jolokia src at 
        <filename>client/javascript/test-app/pom.xml</filename>.
      </para>
  </section>
  
</section>
