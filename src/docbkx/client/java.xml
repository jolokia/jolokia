<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2009-2013 Roland Huss
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<section id="client-java">
  <title>Java Client Library</title>
  <para>
    The Java client library provides an easy access to the Jolokia
    agent from within Java. Since JSR-160 connectors themselved
    provide Java based remote access to MBeans one might wonder about
    the benefits of  a Jolokia Java binding. There are several,
    though: 
  </para>
  <itemizedlist>
    <listitem>
      It provides a typeless access to remote MBeans. The big
      advantage is that for any non-OpenMBean access to custom typed
      objects is still possible without having the type information
      locally in the classpath.
    </listitem>
    <listitem>
      Jolokia can be used in setups where JSR-160 connectors can not
      be used. I.e. in firewall secured environments it is much easier
      to get through to a Jolokia Agent than to an JSR-160 connetor
      using RMI as transport protocol.
    </listitem>
    <listitem>
      <emphasis>Remoteness</emphasis> is explicit in this API instead
      of JSR-160 connector's seeked <emphasis>transparent
      remoteness</emphasis>. RMI has some arguable conceptually
      advantages, but hiding all remote aspects proved to have quite
      some disadvantages when it comes to the programming
      model. Explicite awareness of a 'heavy-weight' remote call is
      better than false transparency in order to know the price tag. 
    </listitem>
  </itemizedlist>
  <para>
    The Java client library follows a strict request-response
    paradigm, much like the underlying HTTP. It uses generics heavily
    and can be centered around three classes:
    <classname>J4pClient</classname> is the client side agent, which
    has various variants of a <methodname>execute()</methodname> for
    sending requests. This method takes one or more
    <classname>J4pRequest</classname> objects as arguments and returns
    one or more <classname>J4pResponse</classname> objects as result.
  </para>
  <sidebar>
    <title>What the heck is this 'J4p' ?</title>
    That's a reminescence to Jolokia's roots which lies in <ulink
    url="http://www.jmx4perl.org">Jmx4Perl</ulink>. It is always good
    to remember where one comes from ;-)
  </sidebar>
  <para>
    But before we got into the details, the next section gives a first
    tutorial to get a feeling how the API can be used.
  </para>

  <section id="client-java-tutorial">
    <title>Tutorial</title>
    <para>
      As seen in the following example, the usage is quite easy. First
      a, client object <varname>client</varname> is created pointing
      to a Jolokia agent at <uri>http://localhost:8080/jolokia</uri>.
      A read request for querying the heap memory usage from the
      <classname>MemoryMXBean</classname> is created and then send via
      the <methodname>execute()</methodname> to the agent. The
      response returned is of type
      <classname>J4pReadResponse</classname> and holds the result
      which finally is printed out to standard output.
    </para>
    <programlisting language="java"><![CDATA[   
import org.jolokia.client.J4pClient;
import org.jolokia.client.request.*;

public class MemoryDemo {
    public static void main(String[] args) {
       J4pClient client = new J4pClient("http://localhost:8080/jolokia");
       J4pReadRequest request = 
           new J4pReadRequest("java.lang:type=Memory","HeapMemoryUsage");
       request.setPath("used");
       J4pReadResponse response = client.execute(request);
       System.out.println("Memory used: " + response.getValue());
    }
}
]]></programlisting>
    <para>
      In order to compile and run this sample, two support libraries
      are required in addition to
      <filename>jolokia-client-java.jar</filename> (<ulink url="../../download.html">Download</ulink>): 
    </para>
    <itemizedlist>
      <listitem>
        Apache <ulink
        url="http://hc.apache.org/httpcomponents-client-ga/index.html">HttpClient</ulink>, 
        4.1 (<ulink url="http://hc.apache.org/downloads.cgi">Download</ulink>)
      </listitem>
      <listitem>
        <ulink
            url="http://code.google.com/p/json-simple/">json-simple</ulink>, 
        1.1 (<ulink url="http://code.google.com/p/json-simple/downloads/list">Download</ulink>)
      </listitem>
    </itemizedlist>
    <para>
      For maven users, the following dependency is sufficient (it will inlcude
      the other two as transcentive depdendencies):
    </para>
    <programlisting language="xml"><![CDATA[
 <dependency>
   <groupId>org.jolokia</groupId>
   <artifactId>jolokia-client-java</artifactId>
   <version>1.0.0</version>
 </dependency>    
]]></programlisting>
  </section>
  <section id="client-client">
    <title>J4pClient</title>
    <para>
      <classname>J4pClient</classname> is the entry point for sending
      requests to a remote Jolokia agent. It can be created in multiple
      ways. For simple cases, public constructors are provided taking
      the mandatory Jolokia agent URL and optionally a 
      <classname>org.apache.http.client.HttpClient</classname>
      instance which is used for the HTTP business. The recommended style
      is to use the J4pClientBuilder, though. This way, all
      parameters for the HTTP communication can easily be set:
    </para>
    <programlisting language="java"><![CDATA[
J4pClient j4p = J4pClient.url("http://localhost:8080/jolokia")
                         .user("roland")
                         .password("s!cr!t")
                         .connectionTimeout(3000)
                         .build();
]]></programlisting>
    <para>
      The builder supports the following parameters with the given
      defaults: 
    </para>
    <table>
      <title>J4pClient parameters</title>
      <thead>
        <tr>
          <td>Parameter</td>
          <td>Description</td>
          <td>Default</td>
        </tr>        
      </thead>
      <tr>
        <td><constant>url</constant></td>
        <td>The URL to the Jolokia agent. This is the only mandatory parameter.</td>
        <td></td>
      </tr>
      <tr>
        <td><constant>user</constant></td>
        <td>User name when authentication is used. If not set, no
        authentication is used. If set, <constant>password</constant>
        must be set, too</td>
        <td></td>
      </tr>
      <tr>
        <td><constant>password</constant></td>
        <td>Password used for authentication. Only used when
        <constant>user</constant> is set.</td>
        <td></td>
      </tr>
      <tr>
        <td><constant>target</constant></td>
        <td>A JMX JSR-160 ServiceURL which should be used by the agent
        as the <emphasis>real</emphasis> target. This parameter should
        be set if the client is used for accessing the agent in <xref
        linkend="proxy">proxy mode</xref>.
        </td> 
        <td></td>
      </tr>
      <tr>
        <td><constant>targetUser</constant></td>
        <td>The JSR-160 user to use when using the proxy mode. If not
        given (and <constant>target</constant> is set), then no
        authentication is used for JSR-160 communication.
        </td> 
        <td></td>
      </tr>
      <tr>
        <td><constant>targetPassword</constant></td>
        <td>JSR-160 Password to use for the proxy mode.</td> 
        <td></td>
      </tr>
      <tr>
        <td><constant>connectionTimeout</constant></td>
        <td>The timeout in milliseconds until a connection is
        established. A timeout value of zero is interpreted as an
        infinite timeout. 
        </td>
        <td>20000</td>
      </tr>
      <tr>
        <td><constant>pooledConnection</constant></td>
        <td>
          Specifies, that the underlying HttpClient should use pooled
          connection manager, which is thread safe and can service
          connection requests from multiples threads
          simultaneously. This is important if the
          <classname>J4pClient</classname> is to be used in a multi
          threaded context. The size of the pool is restricted by the
          parameter <constant>maxTotalConnection</constant>.
          <classname>ThreadSafeClientConnManager</classname> is the
          underlying connection manager. Pooled connections are the
          default.
        </td>
        <td></td>
      </tr>
      <tr>
        <td><constant>singleConnection</constant></td>
        <td>
          Specifies that single connection should be used which
          maintains only one active connection at a time.  Even though
          <classname>J4pClient</classname> is still thread-safe it
          ought to be used by one execution thread only. The
          underlying connection manager is
          <classname>SingleClientConnManager</classname> Pooled
          connections are the default.
        </td>
        <td></td>
      </tr>
      <tr>
        <td><constant>maxTotalConnections</constant></td>
        <td>
          Defines the number of total connections to be pooled. It
          is only used when <constant>pooledConnection</constant> is
          used.
        </td>
        <td>20</td>
      </tr>
      <tr>
        <td><constant>maxConnectionPoolTimeout</constant></td>
        <td>
          Defines the timeout for waiting to obtain a connection
          from the pool. This parameter is only used when
        <constant>pooledConnections</constant> are used.
        </td>
        <td>500</td>
      </tr>
      <tr>
        <td><constant>socketTimeout</constant></td>
        <td>
          Defines the socket timeout (<code>SO_TIMEOUT</code>) in milliseconds,
          which is the timeout for waiting for data  or, put differently,
          a maximum period inactivity between two consecutive data packets.
          A timeout value of zero is interpreted as an infinite timeout.     
        </td>
        <td>0</td>
      </tr>
      <tr>
        <td><constant>contentCharset</constant></td>
        <td>
          Defines the charset to be used per default for encoding
          content body.
        </td> 
        <td>ISO-8859-1</td>
      </tr>
      <tr>
        <td><constant>expectContinue</constant></td>
        <td>
          Activates <literal>Expect: 100-Continue</literal> handshake
          for the entity enclosing methods.  The purpose of the
          <literal>Expect: 100-Continue</literal> handshake to allow a
          client that is sending a request message with a request body
          to determine if the origin server is willing to accept the
          request (based on the request headers) before the client
          sends the request body.  The use of the <literal>Expect:
          100-continue</literal> handshake can result in noticable
          peformance improvement for entity enclosing requests that
          require the target server's authentication.
        </td>
        <td>true</td>
      </tr>
      <tr>
        <td><constant>tcpNoDelay</constant></td>
        <td>
          Determines whether Nagle's algorithm is to be used. The
          Nagle's algorithm tries to conserve bandwidth by minimizing
          the number of segments that are sent. When applications wish
          to decrease network latency and increase performance, they
          can disable Nagle's algorithm (that is enable
          <constant>TCP_NODELAY</constant>). Data will be sent
          earlier, at the cost of an increase in bandwidth
          consumption.
        </td>
        <td>true</td>
      </tr>
      <tr>
        <td><constant>socketBufferSize</constant></td>
        <td>
          Determines the size of the internal socket buffer in bytes
          used to buffer data while receiving and transmitting HTTP
          messages.
        </td>
        <td>8192</td>
      </tr>
    </table>
    <para>
      The <classname>J4pClient</classname> provides various variants
      of a <methodname>execute()</methodname> method, which takes
      either one single request or a list of requests. For a single
      request, the preffered HTTP method (GET or POST) can be
      specified optionally. The <classname>List&lt;R&gt;</classname>
      argument can be used type only for a homogenous bulk request,
      i.e. for multiple requests of the same time. Otherwise an
      untyped list must be used. 
    </para>
    <para>
      Each request can be tuned by giving a map of processing options
      along with their values to the <methodname>execute</methodname>
      method. The possible options are shown in table <xref
      linkend="client-java-queryopts"/>.
    </para>
    <table id="client-java-queryopts">
      <title>J4pClient query parameters</title>
      <thead>
        <tr>
          <td>J4pQueryParameter enum</td>
          <td>Description</td>
        </tr>        
      </thead>
      <tr>
        <td><constant>MAX_DEPTH</constant></td>
        <td>
          Maximum traversal depth for serialization of complex
          objects. Use this with a "list" request to restrict the
          depth of the returned meta data tree.
        </td>
      </tr>
      <tr>
        <td><constant>MAX_COLLECTION_SIZE</constant></td>
        <td>
           Maximum size of collections returned during serialization.
           If larger, a collection is truncated to this size.
        </td>
      </tr>
      <tr>
        <td><constant>MAX_OBJECTS</constant></td>
        <td>
          Maximum number of objects returned in the response's value.
        </td>
      </tr>
      <tr>
        <td><constant>IGNORE_ERRORS</constant></td>
        <td>
          Option for ignoring errors during JMX operations and JSON
          serialization.  This works only for certain operations like
          pattern reads and should be either <literal>true</literal>
          or <literal>false</literal>. 
        </td>
      </tr>
      <tr>
        <td><constant>INCLUDE_STACKTRACE</constant></td>
        <td>
          Whether to include a stack trace in the response when an
          error occurs.  The allowed values are
          <literal>true</literal> for inclusion,
          <literal>false</literal> if no stacktrace should be
          included or <constant>runtime</constant> if only
          <constant>RuntimeException</constant>s should be
          included. Default is <literal>true</literal>.
        </td>
      </tr>
      <tr>
        <td><constant>SERIALIZE_EXCEPTION</constant></td>
        <td>
          Whether to include a JSON serialized version of the
          exception. If set to <literal>true</literal>, the exception
          is added under the key <constant>error_value</constant> in
          the response. Default is <literal>false</literal>.
        </td>
      </tr>
      <tr>
        <td><constant>CANONICAL_NAMING</constant></td>
        <td>
          Whether property keys of <classname>ObjectNames</classname>
          should be ordered in the canonical way or in the way that
          they are created. The allowed values are either
          <literal>true</literal> in which case the canonical key
          order (== alphabetical sorted) is used or
          <literal>false</literal> for getting the keys as
          registered. Default is <literal>true</literal>
        </td>
      </tr>
    </table>
  </section>

  <section id="client-java-requests">
    <title>Request types</title>
    <para>
      For each request type a dedicated request object is provided
      which all are subclasses from
      <classname>J4pRequest</classname>. For all requests it can be
      specified which HTTP method is to be used by setting the
      property <varname>preferredHttpMethod</varname> to either
      <literal>GET</literal> or <literal>POST</literal>.

      Each request type has a corresponding response type which used
      for the return values of the
      <methodname>J4pClient.execute()</methodname>.
    </para>
    <para>
      The constructor of each kind of request can take a
      <classname>J4pTargetConfig</classname> as argument for using a
      request in <xref linkend="proxy">proxy mode</xref>. This
      configurational object holds the JMX service url and
      (optionally) credentials for JSR-160 authentication. When
      given, this proxy target specification overrides any default
      proxy configuration set during the initialization of the 
      <classname>J4pClient</classname>. 
    </para>
    <variablelist>
      <varlistentry>
        <term><classname>J4pReadRequest</classname> and
        <classname>J4pReadResponse</classname></term>
        <listitem>
          <para>
            <classname>J4pReadRequest</classname> is a read request to
            get one or more attributes from one or more MBeans within
            a single request. Various constructor variants can be used
            to specify one or more attributes along with the
            ObjectName (which can be a pattern). A
            <varname>path</varname> can be set as property for
            specifying an <emphasis>inner path</emphasis>, too.
          </para>
          <para>
            <classname>J4pReadResponse</classname> is the
            corresponding response type and allows typed acces to the
            fetched value for a single attribute fetch or to multiple
            values for a multi attribute read. In the latter case, the
            found object and attributes names can be retrieved as
            well. 
          </para>
          <para>
            For more information on fetching the value of multiple
            attributes and multiple MBeans at once, please refer to
            <xref linkend="read"/> or the Javadoc of
            <classname>J4pReadResponse</classname>. 
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><classname>J4pWriteRequest</classname> and <classname>J4pWriteResponse</classname></term>
        <listitem>
          <para>
            A <classname>J4pWriteRequest</classname> is used to set
            the value of an MBean attribute. Beside the mandatory
            object and attribute name the value must be give in the
            constructor as well. Optionally a <varname>path</varname>
            can be provided, too. Only certain types for the given
            value can be serialized properly for calling the Jolokia
            agent as described in <xref
            linkend="serialization-request"/>.
          </para>
          <para>
            The old value is returned as <classname>J4pWriteResponse</classname>'s value.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><classname>J4pExecRequest</classname> and
        <classname>J4pExecResponse</classname></term>
        <listitem>
          <para>
            <classname>J4pExecRequest</classname>s are used for
            executing operation on MBeans. The constructor takes as
            mandatory arguments the MBean's object name, the operation
            name and any arguments required by the operation. Only
            certain types for the given arguments can be serialized
            properly for calling the Jolokia agent as described in
            <xref linkend="serialization-request"/>.
          </para>
          <para>
            The returned <classname>J4pExecResponse</classname>
            contains the return value of the operation called. 
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><classname>J4pSearchRequest</classname> and
        <classname>J4pSearchResponse</classname></term>
        <listitem>
          <para>
            A <classname>J4pSearchRequest</classname> contains a
            valid single MBean object name pattern which is used for
            searching MBeans.
          </para>
          <para>
            The <classname>J4pSearchResponse</classname> holds a
            list of found object names.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><classname>J4pListRequest</classname> and
        <classname>J4pListResponse</classname></term> 
        <listitem>
          <para>
            For obtaining meta data on MBeans a
            <classname>J4pListRequest</classname> should be used. It
            can be used with a <emphasis>inner path</emphasis> to
            obtain only a subtree of the response, otherwise the whole
            tree as described in <xref linkend="response-list"/> is
            returned. With the query parameter
            <constant>maxDepth</constant> can be used to restrict the
            depth of returned tree. 
          </para>
          <para>
            The single value of a
            <classname>J4pListResponse</classname> is a tree (or
            subtree) as a JSON object, which has the format described
            in <xref linkend="response-list"/>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><classname>J4pVersionRequest</classname></term>
        <listitem>
          <para>
            A <classname>J4pVersionRequest</classname> request the
            Jolokia agent's version information and takes no
            argument. 
          </para>
          <para>
            The <classname>J4pVersionResponse</classname> returns the
            agent's version (<varname>agentVersion</varname>), the
            protocol version (<varname>protocolVersion</varname>), the
            applicaton server product name
            (<varname>product</varname>), the vendor name
            (<varname>vendor</varname>) and any extra info
            (<varname>extraInfo</varname>) specific to the plattform
            the Jolokia is running on.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>

  <section id="client-java-execptions">
    <title>Exceptions</title>
    <para>
      In case of an error when executing a request a
      <classname>J4pException</classname> or one its subclass is
      thrown.
    </para>
    <variablelist>
      <varlistentry>
        <term><classname>J4pConnectException</classname></term>
        <listitem>
          <para>
            Exception thrown when the connection to the server
            fails. It contains the original
            <classname>ConnectException</classname> as nested value. 
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><classname>J4pTimeoutException</classname></term>
        <listitem>
          <para>
            Exception thrown in case of an timeout. The nested
            exception is of type
            <classname>ConnectTimeoutException</classname>. 
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><classname>J4pRemoteException</classname></term>
        <listitem>
          <para>
            Generic exception thrown when an exception occured on the
            remote side. This is the case when the JSON response
            obtained is an error response as described in <xref
            linkend="responses"/>. The error type, error value, the 
			status, the request leading to this error and the remote 
			stacktrace as string) can be obtained from this exception. 
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><classname>J4pBulkRemoteException</classname></term>
        <listitem>
          <para>
            Exception thrown when a bulk request fails on the remote
            side. This contains a mixed list which contains the
            <classname>J4pRemoteException</classname> occured as well
            as the <classname>J4pResponse</classname> objects for the
            requests, which suceeded. The list obtained by
            <methodname>getResults()</methodname> contains these
            objects in the same order as the list of requests given to
            <methodname>execute</methodname>. All responses und remote
            exceptions can also be obtained seperately in homogenous
            lists. 
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><classname>J4pException</classname></term>
        <listitem>
          <para>
            Base exception thrown, when no other exception fits,
            i.e. when the exception happened on the client side. The
            original exception is contained as nested exception. 
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </section>
</section>