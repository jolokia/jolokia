<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2009-2013 Roland Huss
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<section id="agents-jvm">
  <title>JVM Agent</title>
  
  <para>
    The JVM agent is right agent when it comes to instrument an
    arbitrary Java application which is not covered by the other
    agents. This agent can be started by any Java program by
    providing certain startup options to the JVM. Or it can be
    dynamically attached (and detached) to an already running Java
    process. This universal agent uses the <ulink
    url="http://download.oracle.com/javase/6/docs/technotes/guides/jvmti/index.html">JVM
    agent API</ulink> and is available for every Sun/Oracle JVM 1.6
    and later. 
  </para>

  <section id="jvm-agent">
    <title>Jolokia as JVM Agent</title>
    <para>
      The JVM agent uses the <ulink
      url="http://download.oracle.com/javase/6/docs/technotes/guides/jvmti/index.html">JVM
      Agent interface</ulink> for linking into any JVM. Under the
      hood it uses an HTTP-Server, which is available on every
      Oracle/Sun JVM from verion 1.6 upwards.
    </para>
    <sidebar>
      The JDK embedded HTTP-Server is not the fastest one (it is used
      e.g. for the JAXWS reference implementation), but for our
      monitoring needs the performance is sufficient. There are
      several configuration options for tuning the HTTP server's
      performance. See below for details.
    </sidebar>
    <section id="jvm-agent-installation">
      <title>Installation</title>
      <para>
        This agent gets installed by providing a single startup option
        <literal>-javaagent</literal> when starting the Java process. 
      </para>
      <programlisting language="xml"><![CDATA[
java -javaagent:agent.jar=port=7777,host=localhost]]></programlisting>
      <para>
        <filename>agent.jar</filename> is the filename of the Jolokia
        JVM agent. Options can be appended as a comma separated
        list. The available options are the same as described in <xref
        linkend="agent-war-init-params"/> plus the one described in
        table <xref linkend="agent-jvm-config"/>. If an options
        contains a comma, an equal sign or a backslash, it must be
        escaped with a backslash. 
      </para>
      <table id="agent-jvm-config">
        <title>JVM agent configuration options</title>
        <thead>
          <tr>
            <td>Parameter</td>
            <td>Description</td>
            <td>Example</td>
          </tr>        
        </thead>
        <tr>
          <td><constant>agentContext</constant></td>
          <td>
            Context under which the agent is deployed. The full URL
            will be <literal>protocol://host:port/agentContext</literal>
          </td>        
          <td>
            <constant>/jolokia</constant>
          </td>
        </tr>
        <tr>
        <td><constant>host</constant></td>
        <td>
          Hostaddress to which the HTTP server should bind to. If "*" or "0.0.0.0" is
          given, the servers binds to every network interface.
        </td>        
        <td>
          <constant>localhost</constant>
        </td>
        </tr>
        <tr>
          <td><constant>port</constant></td>
          <td>
            Port the HTTP server should listen to. If set to 0, then an arbitrary free port
            will be selected.
          </td>        
          <td>
            <constant>8778</constant>
          </td>
        </tr>
        <tr>
          <td><constant>user</constant></td>
          <td>
            User to be used for authentication (along with a <constant>password</constant>)
          </td>        
          <td>
          </td>
        </tr>
        <tr>
          <td><constant>password</constant></td>
          <td>
            Password used for authentication (<constant>user</constant> is then required, too)
          </td>        
          <td>
          </td>
        </tr>
        <tr>
          <td><constant>protocol</constant></td>
          <td>
            HTTP protocol to use. Should be either <literal>http</literal>
            or <literal>https</literal>. For the SSL stack there are various
            additional configuration options. 
          </td>        
          <td>
            <constant>http</constant>
          </td>
        </tr>
        <tr>
          <td><constant>backlog</constant></td>
          <td>
            Size of request backlog before requests get discarded. 
          </td>        
          <td>
            <constant>10</constant>
          </td>
        </tr>
        <tr>
          <td><constant>executor</constant></td>
          <td>
            Threading model of the HTTP server:
            <variablelist>
              <varlistentry>
                <term><literal>fixed</literal></term>
                <listitem>
                  <para>
                    Thread pool with a fixed
                    number of threads (see also
                    <constant>threadNr</constant>)
                  </para>
                </listitem>
              </varlistentry>    
              <varlistentry>
                <term><literal>cached</literal></term>
                <listitem>
                  <para>
                    Cached thread pool which
                    creates threads on demand
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term><literal>single</literal></term>
                <listitem>
                  <para>
                    A single thread only
                  </para>
                </listitem>
              </varlistentry>    
            </variablelist>
          </td>        
          <td>
            <constant>single</constant>
          </td>
        </tr>
        <tr>
          <td><constant>threadNr</constant></td>
          <td>
            Number of threads to be used when the
            <constant>fixed</constant> execution model is chosen. 
          </td>        
          <td>
            <constant>5</constant>
          </td>
        </tr>
        <tr>
          <td><constant>keystore</constant></td>
          <td>
            Path to the SSL keystore to use (https only)
          </td>        
          <td>
          </td>
        </tr>
        <tr>
          <td><constant>keystorePassword</constant></td>
          <td>
            Keystore password (https only)
          </td>        
          <td>
          </td>
        </tr>
        <tr>
          <td><constant>useSslClientAuthentication</constant></td>
          <td>
            Whether client certificates should be used for
            authentication (https only). (<constant>true</constant> or
            <constant>false</constant>). 
          </td>        
          <td>
            <constant>false</constant>
          </td>
        </tr>
        <tr>
          <td><constant>bootAmx</constant></td>
          <td>
            If set to <constant>true</constant> and if the agent is
            attached to a Glassfish server, then during startup the
            AMX subsystem is booted so that Glassfish specific MBeans
            are available. Otherwise, if set to
            <constant>false</constant> the AMX system is not booted. 
          </td>
          <td>
            <constant>true</constant>
          </td>
        </tr>
        <tr>
          <td><constant>config</constant></td>
          <td>
            Path to a properties file from where the configuration
            options should be read. Such a property file can contain
            the configuration options as described here as key value
            pairs (except for the <constant>config</constant> property
            of course :)
          </td>        
          <td>
        </td>
        </tr>
      </table>      
      <para>
        Upon sucessful startup the agent will print out a success
        message with the full URL which can be used by clients for
        contacting the agent. 
      </para>
    </section>
  </section>
  <section id="jvm-attach">
    <title>Attaching a Jolokia agent on the fly</title>
    <para>
      A Jolokia agent can be attached to any running Java process as
      long as the user has sufficient access privileges for
      accessing the process.  This agent uses the <ulink
      url="http://download.oracle.com/javase/6/docs/jdk/api/attach/spec/com/sun/tools/attach/VirtualMachine.html">Java 
      attach API</ulink> for dynamically attaching and detaching to
      and from the process. It works similar to JConsole connecting
      to a local process. The Jolokia advantage is, that after the
      start of the agent, it can be reached over the network.
    </para>
    <para>
      The JAR containing the JVM  agent also contains a client
      application which can be reached via the
      <literal>-jar</literal> option. Call it with
      <literal>--help</literal> to get a short usage information:
    </para>
    <programlisting><![CDATA[
$ java -jar jolokia-jvm-1.0.1-agent.jar --help

Jolokia Agent Launcher
======================

Usage: java -jar jolokia-jvm-1.1.0-SNAPSHOT-agent.jar [options] <command> <pid/regexp>

where <command> is one of
    start     -- Start a Jolokia agent for the process specified
    stop      -- Stop a Jolokia agent for the process specified
    status    -- Show status of an (potentially) attached agent
    toggle    -- Toggle between start/stop (default when no command is given)
    list      -- List all attachable Java processes (default when no argument is given at all)

[options] are used for providing runtime information for attaching the agent:

    --host <host>                  Hostname or IP address to which to bind on
                                   (default: InetAddress.getLocalHost())
    --port <port>                  Port to listen on (default: 8778)
    --agentContext <context>       HTTP Context under which the agent is reachable (default: /jolokia)
    --user <user>                  User used for Basic-Authentication
    --password <password>          Password used for Basic-Authentication
    --quiet                        No output. "status" will exit with code 0 if the agent is running, 1 otherwise
    --verbose                      Verbose output
    --executor <executor>          Executor policy for HTTP Threads to use (default: single)
                                    "fixed"  -- Thread pool with a fixed number of threads (default: 5)
                                    "cached" -- Cached Thread Pool, creates threads on demand
                                    "single" -- Single Thread
    --threadNr <nr threads>        Number of fixed threads if "fixed" is used as executor
    --backlog <backlog>            How many request to keep in the backlog (default: 10)
    --protocol <http|https>        Protocol which must be either "http" or "https" (default: http)
    --keystore <keystore>          Path to keystore (https only)
    --keystorePassword <pwd>       Password to the keystore (https only)
    --useSslClientAuthentication   Use client certificate authentication (https only)
    --debug                        Switch on agent debugging
    --debugMaxEntries <nr>         Number of debug entries to keep in memory which can be fetched from the 
                                   Jolokia MBean
    --maxDepth <depth>             Maximum number of levels for serialization of beans (default: null)
    --maxCollectionSize <size>     Maximum number of element in collections to keep when serializing the response 
                                   (default: null)
    --maxObjects <nr>              Maximum number of objects to consider for serialization (default: maxObjects)
    --policyLocation <url>         Location of a Jolokia policy file
    --mbeanQualifier <qualifier>   Qualifier to use when registering Jolokia internal MBeans
    --canonicalNaming <t|f>        whether to use canonicalName for ObjectNames in 'list' or 'search' 
                                   (default: true)
    --includeStackTrace <t|f>      whether to include StackTraces for error messages (default: true)
    --serializeException <t|f>     whether to add a serialized version of the exception in the Jolokia response 
                                   (default: false)
    --config <configfile>          Path to a property file from where to read the configuration
    --help                         This help documentation
    --version                      Version of this agent

<pid/regexp> can be either a numeric process id or a regular expression. A regular expression is matched
against the processes' names (ignoring case) and must be specific enough to select exactly one process.

If no <command> is given but only a <pid> the state of the Agent will be toggled
between "start" and "stop"

If neither <command> nor <pid> is given, a list of Java processes along with their IDs
is printed

There are several possible reasons, why attaching to a process can fail:
   * The UID of this launcher must be the very *same*as the process to attach too. It not sufficient to be root.
   * The JVM must have HotSpot enabled and be a JVM 1.6 or larger.
   * It must be a Java process ;-)

For more documentation please visit www.jolokia.org]]></programlisting>
    <para>
      Every option described in <xref linkend="agent-jvm-config"/>
      is reflected by a command line option for the
      launcher. Additionally, the option <literal>--quiet</literal>
      can be used to keep the launcher silent and
      <literal>--verbose</literal> for adding some extra logging. 
    </para>
    <para>
      The launcher knows various operational modes, which needs to
      be provided as a non-option argument and possibly require an
      extra argument. 
    </para>
    <variablelist>
      <varlistentry>
        <term><literal>start</literal></term>
        <listitem>
          <para>
            Use this to attach an agent to an already running, local
            Java process. The additional argument is either the
            <emphasis>process id</emphasis> of the Java process to
            attach to or a <emphasis>regular expression</emphasis>
            which is matched against the Java processes names. In the
            later case, exactly one process must match, otherwise an
            exception is raised. The command will return with an
            return code of 0 if an agent has been started. If the
            agent is already running, nothing happens and the launcher
            returns with 1. The URL of the Agent will be printed to
            standard out on an extra line except when the
            <literal>--quiet</literal> option is used.
          </para>
        </listitem>
      </varlistentry>    
      <varlistentry>
        <term><literal>stop</literal></term>
        <listitem>
          <para>
              Command for stopping an running and dynamically attached
              agent. The required argument is the Java process id or
              an regular expression as described for the
              <literal>start</literal> command. If the agent could be
              stopped, the launcher exits with 0, it exits with 1 if
              there was no agent running.
          </para>
        </listitem>
      </varlistentry>    
      <varlistentry>
        <term><literal>toggle</literal></term>
        <listitem>
          <para>
            Starts or stops an dynamically attached agent,
            dependening on its current state. The Java process ID is
            required as an additional argument. If an agent is
            running, <literal>toggle</literal> will stop it (and
            vice versa). The launcer returns with an exit code of 0
            except when the operation fails. When the agent is
            started, the full agent's URL is printed to standard
            out. <literal>toggle</literal> is the default command
            when only a numeric process id is given as argument or a
            regular expression which <emphasis>not</emphasis> the same
            as a known command.
          </para>
        </listitem>
      </varlistentry>    
      <varlistentry>
        <term><literal>status</literal></term>
        <listitem>
          <para>
            Command for showing the current agent status for a given
            process. The process id or a regular expresssion is
            required. The launcer will return with 0 when the agent is
            running, otherwise with 1.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><literal>list</literal></term>
        <listitem>
          <para>
            List all local Java processes in a table with the
            process id and the description as columns. This is the
            default command if no non-option argument is given at
            all. <literal>list</literal> returns with 0 upon normal
            operation and with 1 otherwise.
          </para>
        </listitem>
      </varlistentry>    
    </variablelist>
    <para>
      The launcher is especially suited for
      <emphasis>one-shot</emphasis>, <emphasis>local</emphasis>
      queries. For example, a simple shell script for printing out
      the memory usage of a local Java process, including
      (temporarily) attaching an Jolokia agent looks simply like in
      the following example. With a complete client library like <ulink
      url="http://www.jmxp4perl.org">Jmx4Perl</ulink> even more one
      shot scripts are possible<footnote id="rest-comment">
      <para>And in fact, some support for launching this dynamic
      agent is planned for a forthcoming release of jmx4perl.</para>
      </footnote>.
    </para>
    <programlisting><![CDATA[
#!/bin/sh

url=`java -jar agent.jar start $1 | tail -1`

memory_url="${url}read/java.lang:type=Memory/HeapMemoryUsage"
used=`wget -q -O - "${memory_url}/used" | sed 's/^.*"value":\([0-9]*\).*$/\1/'`
max=`wget -q -O - "${memory_url}/max" | sed 's/^.*"value":\([0-9]*\).*$/\1/'`
usage=$((${used}*100/${max}))
echo "Memory Usage: $usage %"

java -jar agent.jar --quiet stop $1]]></programlisting>
  </section>
</section>
