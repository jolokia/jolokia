<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2009-2013 Roland Huss
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<chapter id="proxy">
    <title>Proxy Mode </title>
    
    <para>
      Using Jolokia in proxy mode enables for agentless operation
      on the target server. A dedicated agent deployment proxies by
      accepting Jolokia requests as input, translating them to JSR-160
      requests for the target. This setup is described in <xref
      linkend="architecture"/>. As noted there, the real target is
      given within the original request, which must be sent as a POST
      request.
    </para>
    <para>
      Agents of all types support the proxy mode. However, since one
      has usually the free choice of platform for a dedicated Jolokia
      proxy, an enviroment optimized for HTTP communication should be
      used. These are either servlet container or JEE server hosting
      the WAR agent or an OSGi runtime with an OSGi HttpService (which
      in turn is typically based on an embedded serlvet container like
      Tomcat or Jetty). The two other agents, the Mule and JVM agents
      are not that well suited for this job. 
    </para>
    <para>
      All client libraries (jmx4perl, Java and Javascript) support the
      usage of proxy mode in its API.
    </para>
    
    <section title="proxy-limitations">
      <title>Limitations of proxy mode</title>
      <para>
        The proxy mode has some limitations compared to the direct
        agent mode, so it is recommended to use a
        direct agent deployment if possible. The limitations are:
      </para>
      <itemizedlist>
        <listitem>
          There is no automatic merging of JMX MBeanServers as in the case
          of the direct mode. Most application servers uses their own
          MBeanServer in addition to the
          <literal>PlatformMBeanServer</literal> (which is always
          present). Each MBean is registered only in one MBeanServer. The
          choice of which <literal>MBeanServer</literal> to use has to be
          given up front, usually as a part of the JMX Service URL. But even
          then (as it is the case for JBoss 5.1) you might run into problems
          when selecting the proper MBeanServer.
        </listitem>
        <listitem>
          Proxying adds an additional remote layer which causes
          additional problems. I.e. the complex operations like
          <constant>list</constant> might fail in the proxy mode
          because of serialization issues. E.g. for JBoss it happens
          that certain MBeanInfo objects requested for the list
          operation are not serializable. This is a bug of JBoss, but
          I expect similar limitations for other application servers
          as well.
        </listitem>
        <listitem>
          Certain workarounds (like the JBoss "<emphasis>can not find
          MXBeans before MBeanInfo has been fetched</emphasis>" bug)
          works only in agent mode.
        </listitem>
        <listitem>
          It is astonishingly hard to set up an application server for
          JSR-160 export. And there are even cases (combinations of
          JDK and AppServer Version) which don't work at all properly
          (e.g. JDK 1.5 and JBoss 5). For certain application servers,
          detailed setup instructions are published at our <ulink
          url="http://labs.consol.de/tags/jsr-160/">blog</ulink>.
        </listitem>
      </itemizedlist>
    </section>
</chapter>