<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2009-2013 Roland Huss
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<chapter id="introduction">
  <title>Introduction</title>
  <para>
    JMX (Java Management Extensions) is <emphasis>the</emphasis>
    standard management solution in the Java world. Since JDK 1.5 it
    is available in every Java Virtual Machine and especially JEE
    application servers use JMX for their management business.
  </para>
  <para>
    I love JMX. It is a well crafted specification, created in times
    where other concepts like EJBs failed spectacularly. Even more
    than ten years after its incubation it is still the one-and-only
    when it comes to management in the Java world.  Especially the
    various levels of sophistications for implementing MBeans,
    starting with dead simple <emphasis>Standard MBeans</emphasis> and
    ending in very flexible Open MBeans and MXBeans, are impressive.
  </para>
  <para>
    However, some of the advanced JMX concepts didn't really appeal to the
    public and are now effectively obsolete. Add-on standards like <ulink
    url="http://jcp.org/en/jsr/detail?id=77">JSR-77</ulink> didn't
    received the adoption level they deserved. And then there is
    <ulink url="http://jcp.org/en/jsr/detail?id=160">JSR-160</ulink>,
    JMX remoting. This specificatiion is designed for ease of usage
    and has the ambition to transparently hide the technical details
    behind the remote communication so that is makes (nearly) no
    difference, whether MBeans are invoked locally or
    remotely. Unfortunately, the underlying transport protocol (RMI)
    and programing model is very Java centric and is not usable
    outside the Java world.
  </para>  
  <para>
    This is where Jolokia steps in. It is an agent based approach,
    living side by side with JSR-160, but uses the much more open HTTP
    for its transport business where the data payload is serialized in
    JSON. This opens a whole new world for different, non-Java
    clients. Beside this protocol switch, Jolokia provides new
    features for JMX remoting, which are not available in JSR-160
    connectors: Bulk requests allow for multiple JMX operations with a
    single remote server roundtrip. A fine grained security mechanism
    can restrict the JMX access on specific JMX operations. Other
    features like the JSR-160 proxy mode or history tracking are
    specific to Jolokia, too.
  </para>
  <para>
    This reference manual explains the details of Jolokia. After an
    overview of Jolokia's architecture in <xref
    linkend="architecture"/>, installation and configuration of the
    various Jolokia agents are described in <xref
    linkend="agents"/>. Jolokia's security policy mechanism (<xref
    linkend="security"/>) and proxy mode (<xref linkend="proxy"/>) are
    covered in the following chapters. For implementors of Jolokia
    client bindings the protocol definition is probably the most
    interesting part (<xref linkend="protocol"/>). Jolokia itself
    comes with the preregistered MBeans listed in <xref
    linkend="mbeans"/>. The available client bindings are described
    in <xref linkend="clients"/>.
  </para>
</chapter>