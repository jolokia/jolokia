<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2009-2013 Roland Huss
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<section id="list">
  <title>Listing MBeans (list)</title>
  <para>
      The list operation collects information about accessible
      MBeans. This information includes the MBean names, their
      attributes, operations and noticifactions along with type
      information and description (as far as they are provided by the
      MBean author which doesn't seem to be often the case).
  </para>
  <section id="get-list">
    <title>GET list request</title>
    <para>
      The GET request format for a Jolokia list request is
    </para>
    <synopsis><![CDATA[<base-url>/list/<inner path>]]></synopsis>
    <para>
      The <literal>&lt;inner path&gt;</literal>, as described in <xref linkend="paths"/> 
      specifies a subset of the complete response. You can
      use this to select a specific domain, MBean or
      attribute/operation. See the next section for the format of the
      complete response.      
    </para>
  </section>

  <section id="post-list">
    <title>POST list request</title>
    <para>
      A list POST request has the following keys:
    </para>
    <table>
      <title>POST list Request</title>
      <thead>
        <tr>
          <td>Key</td>
          <td>Description</td>
          <td>Example</td>
        </tr>        
      </thead>
      <tr>
        <td><constant>type</constant></td>
        <td><emphasis role="bold">list</emphasis></td>
        <td/>
      </tr>
      <tr>
        <td><constant>path</constant></td>
        <td>
          Inner path for accessing the value of a subset of the complete list
          (<xref linkend="paths"/>). 
        </td>
        <td><literal>java.lang/type=Memory/attr</literal></td>
      </tr>
    </table>
    <para>
      The following request fetches the information about the MBean <literal>java.lang:type=Memory</literal>
    </para>
    <programlisting><![CDATA[
{ 
   "type":"LIST",
   "path":"java.lang/type=Memory"
}]]></programlisting>
  </section>

  <section id="response-list">
    <title>List response</title>
    <para>
      The <constant>value</constant> has the following format:
    </para>
    <programlisting><![CDATA[
 { 
  <domain> : 
  {
    <prop list> : 
    {
      "attr" : 
      {
        <attr name> : 
        { 
          "type" : <attribute type>,
          "desc" : <textual description of attribute>,
          "rw"   : true/false
        },
        ....
      }, 
      "op" :
      {
         <operation name> :
         {
           "args" : [
                      { 
                       "type" : <argument type>
                       "name" : <argument name>
                       "desc" : <textual description of argument>
                      },
                      .....
                     ],
           "ret"  : <return type>,
           "desc" : <textual description of operation>
         }, 
         .....
      },
      "not" : 
      {
         "name" : <name>,
         "desc" : <desc>,
         "types" : [ <type1>, <type2> ]
      }
    }, 
    ....
  },
  ....
 }]]></programlisting>
    <para>
      The <literal>domain name</literal> and the <literal>property
      list</literal> together uniquely identify a single MBean. The
      property list is in the so called <emphasis>canonical
      order</emphasis>, i.e. in the form
      <literal><![CDATA["<key1>=<val1>,<key2>=<val2>,.."]]></literal>
      where the keys are ordered alphabetically. Each MBean has zero
      or more attributes and operations which can be reached in an
      MBeans JSON object with the keys <constant>attr</constant> and
      <constant>op</constant> respectively. Within these groups the
      contained information is explained above in the schema and
      consist of Java types for attributes, arguments and return
      values, descriptive information and whether an attribute is
      writable (<constant>rw</constant> == <constant>true</constant>) or
      read-only.
    </para>
    <para>
      As for reading attributes you can fetch a subset of this information using an
      path. E.g a path of <literal>domain/prop-list</literal> would return the value for a single
      bean only. For example, a request 
      <informalexample>
        <literallayout class="monospaced"><![CDATA[http://localhost:8080/jolokia/list/java.lang/type=Memory]]></literallayout>
      </informalexample>
      results in an answer
    </para>
    <programlisting><![CDATA[
 {
   "value":
   { 
     "op":
     { 
       "gc":
       {
         "args":[],
         "ret":"void",
         "desc":"gc"
       }
     },
     "attr":
     {
       "NonHeapMemoryUsage":
       {
         "type":"javax.management.openmbean.CompositeData",
         "rw":false,
         "desc":"NonHeapMemoryUsage"
       },
       "Verbose":
       {
         "type":"boolean",
         "rw":true,
         "desc":"Verbose"
       },
       "HeapMemoryUsage":
       {
         "type":"javax.management.openmbean.CompositeData",
         "rw":false,
         "desc":"HeapMemoryUsage"
       },
       "ObjectPendingFinalizationCount":
       {
         "type":"int",
         "rw":false,
         "desc":"ObjectPendingFinalizationCount"
       }
     }
   },
   "status":200,
   "request":
   {
     "type":"list",
     "path":"java.lang\/type=Memory"
   }
 }]]></programlisting>      
  </section>

  <section>
    <title>Restrict depth of depth</title>
    <para>
      The optional parameter <literal>maxDepth</literal> can be used
      to restrict the depth of the return tree. Two value are
      possible: A <literal>maxDepth</literal> of 1 restricts the
      return value to a map with the JMX domains as keys, a
      <literal>maxDepth</literal> of 2 truncates the map returned to
      the domain names (first level) and the MBean's properties
      (second level). The final values of the maps don't have any
      meaning ander are dummy values.
    </para>
  </section>
</section>
