<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2009-2013 Roland Huss
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<section id="read">
  <title>Reading attributes (read)</title>
  <para>
    Reading MBean attributes is probably the most used JMX method,
    especially when it comes to monitoring. Concerning Jolokia, it is
    also the most powerful one with the richest semantics. Obviously
    the value of a single attribute can be fetched, but Jolokia
    supports also fetching of a list of given attributes on a single
    MBean or even on multiple MBeans matching a certain pattern.
  </para>
  <para>
    Reading attributes are supported by both kinds of requests,
    <literal>GET</literal> and <literal>POST</literal>. 
  </para>
  <note>
    Don't confuse fetching multiple attributes on possibly multiple
    MBeans with bulk requests. A single read request will always
    result in a single read response, even when multiple attribute
    values are fetched. Only the single response's structure of the
    <literal>value</literal> will differ depending on what kind of
    read request was performed.
  </note>
  <para>
    A read request for multiple attributes on the same MBean is
    initiated by giving a list of attributes to the request. For a
    POST request this is an JSON array, for a GET request it is a
    comma separated list of attribute names (where slashes and
    exclamation marks must be escaped as described in <xref
    linkend="escape-rules"/>). If no attribute is provided, then all
    attributes are fetched.  The MBean name can be given as a pattern
    in which case the attributes are read on all matching MBeans. If a
    MBean pattern and multiple attributes are requestes, then only the
    value of attributes which matches both are returned, the others
    are ignored. Paths cannot be used with multi value reads, though.
  </para>
  <section id="get-read">
    <title>GET read request</title>
    <para>
      The GET URL for a read request has the following format:
    </para>
    <synopsis><![CDATA[<base-url>/read/<mbean name>/<attribute name>/<inner path>]]></synopsis>
    <table>
      <title>GET Read Request</title>
      <thead>
        <tr>
          <td>Part</td>
          <td>Description</td>
          <td>Example</td>
        </tr>        
      </thead>
      <tr>
        <td><literal>&lt;mbean name&gt;</literal></td>
        <td>
          The <ulink
          url="http://download.oracle.com/javase/6/docs/api/javax/management/ObjectName.html">ObjectName</ulink>
          of the MBean for which the attribute should be fetched. It
          contains two parts: A domain part and a list of properties
          which are separated by <literal>:</literal>. Properties
          themselves are combined in a comma separated list of
          key-value pairs. This name can be a pattern in which case
          multiple MBeans are queried for the attribute value.
        </td>
        <td><literal>java.lang:type=Memory</literal></td>
      </tr>
      <tr>
        <td><literal>&lt;attribute name&gt;</literal></td>
        <td>Name of attribute to read. This can be a list of Attribute
        names separated by comma. Slashes and exclamations marks need
        to be escaped as described in <xref
        linkend="escape-rules"/>. If no attribute is given, all
        attributes are read.</td>
        <td><literal>HeapMemoryUsage</literal></td>
      </tr>
      <tr>
        <td><literal>&lt;inner path&gt;</literal></td>
        <td>
          This optional part describes an <emphasis>inner
          path</emphasis> as described in <xref linkend="paths"/>
        </td>
        <td><literal>used</literal></td>
      </tr>
    </table>

    <para>
      With this URL the used heap memory can be obtained:
      <informalexample>
        <literallayout class="monospaced">http://localhost:8080/jolokia/read/java.lang:type=Memory/HeapMemoryUsage/used</literallayout>
      </informalexample>           
    </para>
  </section>  
  <section id="post-read">
    <title>POST read request</title>
    <para>
      A the keys available for read POST requests are shown in the
      following table.
    </para>
    <table>
      <title>POST Read Request</title>
      <thead>
        <tr>
          <td>Key</td>
          <td>Description</td>
          <td>Example</td>
        </tr>        
      </thead>
      <tr>
        <td><constant>type</constant></td>
        <td><emphasis role="bold">read</emphasis></td>
        <td/>
      </tr>
      <tr>
        <td><constant>mbean</constant></td>
        <td>MBean's ObjectName which can be a pattern</td>
        <td><literal>java.lang:type=Memory</literal></td>
      </tr>
      <tr>
        <td><constant>attribute</constant></td>
        <td>Attribute name to read or a JSON array containing a list
        attributes to read. No attribute is given, then all attributes
        are read.</td>
        <td><literal>HeapMemoryUsage</literal>, <literal>[
        "HeapMemoryUsage", "NonHeapMemoryUsage" ]</literal></td>
      </tr>
      <tr>
        <td><constant>path</constant></td>
        <td>Inner path for accessing the value of a complex value
        (<xref linkend="paths"/>)</td>
        <td><constant>used</constant></td>
      </tr>
    </table>
    <para>
      The following request fetches the number of active threads:      
    </para>
    <programlisting><![CDATA[
{ 
   "type":"read",
   "mbean":"java.lang:type=Threading",
   "attribute":"ThreadCount"
}]]></programlisting>
  </section>
  <section id="response-read">
    <title>Read response</title>
    <para>
      The general format of the JSON response is described in <xref
      linkend="responses"/> in detail.  A typical response for an
      attribute read operation for an URL like
      <informalexample>
        <literallayout class="monospaced">http://localhost:8080/jolokia/read/java.lang:type=Memory/HeapMemoryUsage/</literallayout>
      </informalexample>
      looks like 
    </para>
    <programlisting><![CDATA[
 {
   "value":{
             "init":134217728,
             "max":532742144,
             "committed":133365760,
             "used":19046472
           },
   "status":200,
   "timestamp":1244839118,
   "request":{
               "mbean":"java.lang:type=Memory",
               "type":"read",
               "attribute":"HeapMemoryUsage"
             },
   "history":[{"value":{
                         "init":134217728,
                         "max":532742144,
                         "committed":133365760,
                         "used":18958208
                       },
               "timestamp":1244839045
             }, ....
             ]
 }]]></programlisting>
    <para>
      The <constant>value</constant> contains the response's
      value. For simple data types it is a scalar value, more complex
      types are serialized into a JSON object. See <xref
      linkend="serialization"/> for detail on object serialization.
    </para>
    <para>
      For a read request to a single MBean with multiple attributes, the
      returned value is a JSON object with the attribute names as keys
      and their values as values. For example a request to
      <literal>http://localhost:8080/jolokia/read/java.lang:type=Memory</literal>
      leads to
    </para>
    <informalexample>
      <programlisting><![CDATA[
{
 "timestamp": 1317151518,
 "status": 200,
 "request": {"mbean":"java.lang:type=Memory","type":"read"},
 "value":{
   "Verbose": false,
   "ObjectPendingFinalizationCount": 0,
   "NonHeapMemoryUsage": {"max":136314880,"committed":26771456,"init":24317952,"used":15211720},
   "HeapMemoryUsage": {"max":129957888,"committed":129957888,"init":0,"used":2880008}
 }
}]]></programlisting>
    </informalexample>
    <para>
      A request to a MBean pattern returns as value a JSON object,
      with the MBean names as keys and as value another JSON object
      with the attribute name as keys and the attribute values as
      values. For example a request
      <literal>http://localhost:8080/jolokia/read/java.lang:type=*/HeapMemoryUsage</literal> 
      returns something like
    </para>
    <informalexample>
      <programlisting><![CDATA[
{
 "timestamp": 1317151980,
 "status": 200,
 "request": {"mbean":"java.lang:type=*","attribute":"HeapMemoryUsage","type":"read"},
 "value": { 
    "java.lang:type=Memory": { 
      "HeapMemoryUsage": {"max":129957888,"committed":129957888,"init":0,"used":3080912}
    }
 }
}]]>
</programlisting>
    </informalexample>
  </section>  
</section>
