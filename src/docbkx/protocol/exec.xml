<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2009-2013 Roland Huss
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<section id="exec">
  <title>Executing JMX operations (exec)</title>
  <para>
    Beside attribute provides a way for the execution of exposed JMX
    operations with optional arguments. The same as for writing
    attributes, Jolokia must be able to serialize the arguments. See
    <xref linkend="serialization"/> for details. Execution of
    overloaded methods is supported. The JMX specifications recommends
    to avoid overloaded methods when exposing them via JMX, though.
  </para>
  <section id="get-exec">
    <title>GET exec request</title>
    <para>
      The format of an GET exec request is
      <synopsis><![CDATA[<base url>/exec/<mbean name>/<operation name>/<arg1>/<arg2>/....]]></synopsis>
    </para>
    <table>
      <title>GET Exec Request</title>
      <thead>
        <tr>
          <td>Part</td>
          <td>Description</td>
          <td>Example</td>
        </tr>        
      </thead>
      <tr>
        <td><literal>&lt;mbean name&gt;</literal></td>
        <td>MBean's ObjectName</td>
        <td><literal>java.lang:type=Threading</literal></td>
      </tr>
      <tr>
        <td><literal>&lt;operation name&gt;</literal></td>
        <td>  
          Name of the operation to execute. If an overloaded method,
          it is mandatory to provide a method signature as
          well. A signature consist the fully qualified argument class
          names or native types, separated by columns and enclosed with
          parentheses.  
        </td>
        <td>
          <literal>loadUsers(java.lang.String,int)</literal>
        </td>
      </tr>
      <tr>
        <td><literal>&lt;arg1&gt;</literal>, <literal>&lt;arg2&gt;</literal>, ...</td>
        <td>
          String representation for the arguments required to execute this
          operation. Only certain data types can be used here as
          desribed in <xref linkend="serialization-request"/>.
        </td>
        <td><literal>"true","true"</literal></td>
      </tr>
    </table>

    <para>
      The following request will trigger a garbage collection:
      <informalexample>
        <literallayout class="monospaced">http://localhost:8080/jolokia/exec/java.lang:type=Memory/gc</literallayout>
      </informalexample>
    </para>
  </section>
  
  <section id="post-exec">
    <title>POST exec request</title>

      <table>
        <title>POST Exec Request</title>
        <thead>
          <tr>
            <td>Key</td>
            <td>Description</td>
            <td>Example</td>
          </tr>        
        </thead>
        <tr>
          <td><constant>type</constant></td>
          <td><emphasis role="bold">exec</emphasis></td>
          <td/>
        </tr>
        <tr>
          <td><constant>mbean</constant></td>
          <td>MBean's ObjectName</td>
          <td><literal>java.lang:type=Threading</literal></td>
        </tr>
        <tr>
          <td><constant>operation</constant></td>
          <td>The operation to execute, optionally with a signature as
          described above.
          </td>
          <td><literal>dumpAllThreads</literal></td>
        </tr>
        <tr>
          <td><constant>arguments</constant></td>
          <td>
            An array of arguments for invoking this operation. The value must be serializable as described in 
            <xref linkend="serialization-request"/>.
          </td>
          <td><literal>[true,true]</literal></td>
        </tr>
      </table>
    <para>
      The following request dumps all threads (along with locked
      monitors and locked synchronizers, thats what the boolean
      arguments are for):
    </para>
    <programlisting><![CDATA[
{
   "type":"EXEC",
   "mbean":"java.lang:type=Threading",
   "operation":"dumpAllThreads",
   "arguments":[true,true]
}]]></programlisting>

  </section>

  <section id="response-exec">
    <title>Exec response</title>
    <para>
      For an <constant>exec</constant> operation, the response
      contains the return value of the
      operation. <constant>null</constant> is returned if either the
      operation returns a null value or the operation is declared as
      void. A typical response for an URL like
      <synopsis><![CDATA[http://localhost:8080/jolokia/exec/java.util.logging:type=Logging/setLoggerLevel/global/INFO]]></synopsis>
      looks like
    </para>
    <programlisting><![CDATA[
 {
   "value":null,
   "status":200,
   "request": {
                "type":"exec",
                "mbean":"java.util.logging:type=Logging",
                "operation":"setLoggerLevel",
                "arguments":["global","INFO"]
              }
}

]]></programlisting>
    <para>
      The return value get serialized as described in <xref linkend="serialization"/>.
    </para>
  </section>
</section>
