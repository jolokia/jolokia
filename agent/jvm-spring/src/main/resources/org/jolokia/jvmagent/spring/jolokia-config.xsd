<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright 2009-2012  Roland Huss
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:tns="http://www.jolokia.org/jolokia-spring/schema/config"
           targetNamespace="http://www.jolokia.org/jolokia-spring/schema/config"
           elementFormDefault="qualified"
           attributeFormDefault="unqualified">

  <!-- Declaration of a Jolokia server -->
  <xs:element name="agent">
    <xs:annotation>
      <xs:documentation source="org.jolokia.jvmagent.spring.SpringJolokiaAgent">
        A JVM Jolokia agent for exposing JMX via Jolokia.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
      <!-- Configuration used -->
        <xs:element name="config" type="tns:Config" minOccurs="0" maxOccurs="1"/>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID" use="optional">
        <xs:annotation>
          <xs:documentation>
            Optional id for specifying this servers name as it
            can be referenced from the Spring application context.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="lookupConfig" type="xs:boolean" use="optional">
        <xs:annotation>
          <xs:documentation>
            If set to true, externally defined configurations are looked
            up and used according to their order in addition to the configuration
            defined withing this tag.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="systemPropertiesMode">
        <xs:annotation>
          <xs:documentation><![CDATA[
  Configuration for the Jolokia server can be looked up from system properties, too. Any system
  property starting with "jolokia." is considered to be a configuration option where the configuration
  key is the part after "jolokia.". Several modes are available for how system properties should be used.
  By default, no lookup for system properties is performed.

  "never" indicates no system properties should be looked up. This is the default.
	"fallback" indicates system properties should be used as fallback if no local configuration is given
	"override" indicates system properties should override any local configuration with highest priority
          ]]></xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="never"/>
            <xs:enumeration value="fallback"/>
            <xs:enumeration value="override"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <!-- Configuration for the Jolokia server -->
  <xs:element name="config" type="tns:Config"/>

  <!-- Jolokia MBeanServer-->
  <xs:element name="mbean-server">
    <xs:annotation>
      <xs:documentation source="org.jolokia.jvmagent.spring.SpringJolokiaMBeanServerFactory">
        The Jolokia MBeanServer which can be used to hide MBean from JSR-160 exports and for
        handling @JsonMBeans.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:attribute name="id" type="xs:ID">
        <xs:annotation>
          <xs:documentation>
            Id for specifying this servers name as it
            can be referenced from the Spring application context.
          </xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <!-- ============================================================================== -->
  <!-- Type definition for the configuration -->
  <xs:complexType name="Config">
    <xs:annotation>
      <xs:documentation source="org.jolokia.jvmagent.spring.SpringJolokiaConfigHolder">
        Configuration for a Jolokia JVM agent
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="xs:ID" use="optional"/>
    <xs:attribute name="order" type="xs:int">
      <xs:annotation>
        <xs:documentation>
          Order in which configuration should be applied. This attribute is
          only used when the &lt;jolokia:server&gt;
          is configured with "lookup-config" set to true. If multiple
          &lt;jolokia:config&gt; config objects exist, they get applied in the provided
          order. This attribute is ignored when using &lt;jolokia:config&gt; within a
          &lt;jolokia:server&gt; configuration. Embedded configuration always serves as
          default value with the lowese precedence. The higher the
          order the higher the importance/precedence configuration is.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="host" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Host address to listen to. Default is InetAddress.getLocalHost()
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="port" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Port to listen to. Default is 8778.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="autoStart" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>
          Whether to start the Jolokia server automatically. Default is true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <!--
    private String      context;
    -->

    <xs:attribute name="protocol">
      <xs:annotation>
        <xs:documentation>
          Protocol to use for communication. Can be either "http" or "https".
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="http"/>
          <xs:enumeration value="https"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>

    <xs:attribute name="executor">
      <xs:annotation>
        <xs:documentation>
          Threading model of the HTTP server:
          "fixed" -- Thread pool with a fixed number of threads (see also "thread-nr"),
          "cached" -- Cached thread pool which creates threads on demand,
          "single" -- A single thread only
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="fixed"/>
          <xs:enumeration value="cached"/>
          <xs:enumeration value="single"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>

    <xs:attribute name="threadNr" type="xs:positiveInteger">
      <xs:annotation>
        <xs:documentation>
          Number of threads to use when the execution model is configured to "fixed".
          (See attribute "executor")
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="backlog" type="xs:positiveInteger">
      <xs:annotation>
        <xs:documentation>
          Size of request backlog before requests get discarded.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="useSslAuthentication" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>
          Whether client certificates should be used for authentication (https only).
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="keystore" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Path to the SSL keystore to use (https only)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="keystorePassword" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Keystore password (https only)
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


    <!-- Jolokia generic config (see enum ConfigKey) -->
    <xs:attribute name="user" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          User which is allowed to connect
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="password" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Password for authenticating the user.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="agentContext" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Context under which the agent is deployed. The full URL
          will be protocol://host:port/context
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="historyMaxEntries" type="xs:positiveInteger">
      <xs:annotation>
        <xs:documentation>
          Maximum number of history entries to keep
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="debug" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>
          Whether debug is switched on or not
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="debugMaxEntries" type="xs:positiveInteger">
      <xs:annotation>
        <xs:documentation>
          Maximum number of debug entries to hold
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="dispatcherClasses" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Request Dispatcher to use in addition to the local dispatcher.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="maxDepth" type="xs:positiveInteger">
      <xs:annotation>
        <xs:documentation>
          Maximum traversal depth for serialization of complex objects.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="maxCollectionSize" type="xs:positiveInteger">
      <xs:annotation>
        <xs:documentation>
          Maximum size of collections returned during serialization.
          If larger, the collection is truncated
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="maxObjects" type="xs:positiveInteger">
      <xs:annotation>
        <xs:documentation>
          Maximum number of objects returned by serialization
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="canonicalNaming" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>
          This option specifies in which order the key-value
          properties within ObjectNames as returned by
          "list" or "search" are
          returned. By default this is the so called 'canonical order'
          in which the keys are sorted alphabetically. If this option
          is set to false, then the natural order
          is used, i.e. the object name as it was registered. This
          option can be overridden with a query parameter of the same
          name. By default this option is set to 'true'.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="includeStackTrace">
      <xs:annotation>
        <xs:documentation>
          Whether to include a stacktrace of an exception in case of
          an error. By default it it set to "true"
          in which case the stacktrace is always included. If set to
          "false", no stacktrace is included. If
          the value is "runtime" a stacktrace is
          only included for RuntimeExceptions. This global option can
          be overridden with a query parameter.
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="true"/>
          <xs:enumeration value="false"/>
          <xs:enumeration value="runtime"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>

    <xs:attribute name="serializeException" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>
          When this parameter is set to "true",
          then an exception thrown will be serialized as JSON and
          included in the response under the key
          "error_value". No stack trace information
          will be included, though. This global option can be
          overridden by a query parameter of the same name.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="policyLocation" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Location of the policy file
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="mbeanQualifier" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Optional domain name for registering own MBeans
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="mimeType">
      <xs:annotation>
        <xs:documentation>
          Mime Type to use for the response value. By default, this is
          "text/plain", but it could be useful to return
          "application/json", too.
        </xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="text/plain"/>
          <xs:enumeration value="application/json"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>
  </xs:schema>